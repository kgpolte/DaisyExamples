ARM GAS  C:\Users\kgpol\AppData\Local\Temp\ccDNfb9N.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 28, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 2
  10              		.eabi_attribute 34, 1
  11              		.eabi_attribute 18, 4
  12              		.file	"BassDrum.cpp"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text._ZN5daisy6SwitchD2Ev,"axG",%progbits,_ZN5daisy6SwitchD5Ev,comdat
  17              		.align	1
  18              		.p2align 2,,3
  19              		.weak	_ZN5daisy6SwitchD2Ev
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv5-d16
  26              	_ZN5daisy6SwitchD2Ev:
  27              	.LVL0:
  28              	.LFB1639:
  29              		.file 1 "../../libDaisy//src/hid/switch.h"
   1:../../libDaisy//src/hid/switch.h **** #pragma once
   2:../../libDaisy//src/hid/switch.h **** #ifndef DSY_SWITCH_H
   3:../../libDaisy//src/hid/switch.h **** #define DSY_SWITCH_H
   4:../../libDaisy//src/hid/switch.h **** #include "daisy_core.h"
   5:../../libDaisy//src/hid/switch.h **** #include "per/gpio.h"
   6:../../libDaisy//src/hid/switch.h **** #include "sys/system.h"
   7:../../libDaisy//src/hid/switch.h **** 
   8:../../libDaisy//src/hid/switch.h **** namespace daisy
   9:../../libDaisy//src/hid/switch.h **** {
  10:../../libDaisy//src/hid/switch.h **** /** 
  11:../../libDaisy//src/hid/switch.h ****     Generic Class for handling momentary/latching switches \n 
  12:../../libDaisy//src/hid/switch.h ****     Inspired/influenced by Mutable Instruments (pichenettes) Switch classes
  13:../../libDaisy//src/hid/switch.h ****     @author Stephen Hensley
  14:../../libDaisy//src/hid/switch.h ****     @date December 2019
  15:../../libDaisy//src/hid/switch.h ****     @ingroup controls
  16:../../libDaisy//src/hid/switch.h **** */
  17:../../libDaisy//src/hid/switch.h **** class Switch
  18:../../libDaisy//src/hid/switch.h **** {
  19:../../libDaisy//src/hid/switch.h ****   public:
  20:../../libDaisy//src/hid/switch.h ****     /** Specifies the expected behavior of the switch */
  21:../../libDaisy//src/hid/switch.h ****     enum Type
  22:../../libDaisy//src/hid/switch.h ****     {
  23:../../libDaisy//src/hid/switch.h ****         TYPE_TOGGLE,    /**< & */
  24:../../libDaisy//src/hid/switch.h ****         TYPE_MOMENTARY, /**< & */
  25:../../libDaisy//src/hid/switch.h ****     };
  26:../../libDaisy//src/hid/switch.h ****     /** Specifies whether the pressed is HIGH or LOW. */
  27:../../libDaisy//src/hid/switch.h ****     enum Polarity
  28:../../libDaisy//src/hid/switch.h ****     {
  29:../../libDaisy//src/hid/switch.h ****         POLARITY_NORMAL,   /**< & */
ARM GAS  C:\Users\kgpol\AppData\Local\Temp\ccDNfb9N.s 			page 2


  30:../../libDaisy//src/hid/switch.h ****         POLARITY_INVERTED, /**< & */
  31:../../libDaisy//src/hid/switch.h ****     };
  32:../../libDaisy//src/hid/switch.h **** 
  33:../../libDaisy//src/hid/switch.h ****     /** Specifies whether to use built-in Pull Up/Down resistors to hold button at a given state wh
  34:../../libDaisy//src/hid/switch.h ****     enum Pull
  35:../../libDaisy//src/hid/switch.h ****     {
  36:../../libDaisy//src/hid/switch.h ****         PULL_UP,   /**< & */
  37:../../libDaisy//src/hid/switch.h ****         PULL_DOWN, /**< & */
  38:../../libDaisy//src/hid/switch.h ****         PULL_NONE, /**< & */
  39:../../libDaisy//src/hid/switch.h ****     };
  40:../../libDaisy//src/hid/switch.h **** 
  41:../../libDaisy//src/hid/switch.h ****     Switch() {}
  42:../../libDaisy//src/hid/switch.h ****     ~Switch() {}
  30              		.loc 1 42 5 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		@ link register save eliminated.
  35              		.loc 1 42 16 is_stmt 0 view .LVU1
  36 0000 7047     		bx	lr
  37              		.cfi_endproc
  38              	.LFE1639:
  40              		.weak	_ZN5daisy6SwitchD1Ev
  41              		.thumb_set _ZN5daisy6SwitchD1Ev,_ZN5daisy6SwitchD2Ev
  42 0002 00BF     		.section	.text._ZN5daisy9DaisySeedD2Ev,"axG",%progbits,_ZN5daisy9DaisySeedD5Ev,comdat
  43              		.align	1
  44              		.p2align 2,,3
  45              		.weak	_ZN5daisy9DaisySeedD2Ev
  46              		.syntax unified
  47              		.thumb
  48              		.thumb_func
  49              		.fpu fpv5-d16
  51              	_ZN5daisy9DaisySeedD2Ev:
  52              	.LVL1:
  53              	.LFB2555:
  54              		.file 2 "../../libDaisy//src/daisy_seed.h"
   1:../../libDaisy//src/daisy_seed.h **** #pragma once
   2:../../libDaisy//src/daisy_seed.h **** #ifndef DSY_SEED_H
   3:../../libDaisy//src/daisy_seed.h **** #define DSY_SEED_H
   4:../../libDaisy//src/daisy_seed.h **** 
   5:../../libDaisy//src/daisy_seed.h **** #include "daisy.h"
   6:../../libDaisy//src/daisy_seed.h **** 
   7:../../libDaisy//src/daisy_seed.h **** //Uncomment this out if you're still using the rev2 hardware
   8:../../libDaisy//src/daisy_seed.h **** //#define SEED_REV2
   9:../../libDaisy//src/daisy_seed.h **** 
  10:../../libDaisy//src/daisy_seed.h **** namespace daisy
  11:../../libDaisy//src/daisy_seed.h **** {
  12:../../libDaisy//src/daisy_seed.h **** /**
  13:../../libDaisy//src/daisy_seed.h ****    @brief This is the higher-level interface for the Daisy board. \n 
  14:../../libDaisy//src/daisy_seed.h ****     All basic peripheral configuration/initialization is setup here. \n
  15:../../libDaisy//src/daisy_seed.h **** 
  16:../../libDaisy//src/daisy_seed.h ****    @ingroup boards
  17:../../libDaisy//src/daisy_seed.h **** */
  18:../../libDaisy//src/daisy_seed.h **** class DaisySeed
  19:../../libDaisy//src/daisy_seed.h **** {
  20:../../libDaisy//src/daisy_seed.h ****   public:
  21:../../libDaisy//src/daisy_seed.h ****     DaisySeed() {}
ARM GAS  C:\Users\kgpol\AppData\Local\Temp\ccDNfb9N.s 			page 3


  22:../../libDaisy//src/daisy_seed.h ****     ~DaisySeed() {}
  55              		.loc 2 22 5 is_stmt 1 view -0
  56              		.cfi_startproc
  57              		@ args = 0, pretend = 0, frame = 0
  58              		@ frame_needed = 0, uses_anonymous_args = 0
  59              		@ link register save eliminated.
  60              	.LBB96:
  61              	.LBI96:
  62              		.file 3 "../../libDaisy//src/sys/system.h"
   1:../../libDaisy//src/sys/system.h **** #ifndef DSY_SYSTEM_H
   2:../../libDaisy//src/sys/system.h **** #define DSY_SYSTEM_H
   3:../../libDaisy//src/sys/system.h **** 
   4:../../libDaisy//src/sys/system.h **** #ifndef UNIT_TEST // for unit tests, a dummy implementation is provided below
   5:../../libDaisy//src/sys/system.h **** 
   6:../../libDaisy//src/sys/system.h **** #include <cstdint>
   7:../../libDaisy//src/sys/system.h **** #include "per/tim.h"
   8:../../libDaisy//src/sys/system.h **** 
   9:../../libDaisy//src/sys/system.h **** namespace daisy
  10:../../libDaisy//src/sys/system.h **** {
  11:../../libDaisy//src/sys/system.h **** /** A handle for interacting with the Core System.
  12:../../libDaisy//src/sys/system.h ****  ** This includes the Clock tree, MPU, global DMA initialization,
  13:../../libDaisy//src/sys/system.h ****  ** cache handling, and any other necessary global initiailzation
  14:../../libDaisy//src/sys/system.h ****  **
  15:../../libDaisy//src/sys/system.h ****  ** @author shensley
  16:../../libDaisy//src/sys/system.h ****  ** @ingroup system
  17:../../libDaisy//src/sys/system.h ****  */
  18:../../libDaisy//src/sys/system.h **** class System
  19:../../libDaisy//src/sys/system.h **** {
  20:../../libDaisy//src/sys/system.h ****   public:
  21:../../libDaisy//src/sys/system.h ****     /** Contains settings for initializing the System */
  22:../../libDaisy//src/sys/system.h ****     struct Config
  23:../../libDaisy//src/sys/system.h ****     {
  24:../../libDaisy//src/sys/system.h ****         /** Specifies the system clock frequency that feeds APB/AHB clocks, etc. */
  25:../../libDaisy//src/sys/system.h ****         enum class SysClkFreq
  26:../../libDaisy//src/sys/system.h ****         {
  27:../../libDaisy//src/sys/system.h ****             FREQ_400MHZ,
  28:../../libDaisy//src/sys/system.h ****             FREQ_480MHZ,
  29:../../libDaisy//src/sys/system.h ****         };
  30:../../libDaisy//src/sys/system.h **** 
  31:../../libDaisy//src/sys/system.h ****         /** Method to call on the struct to set to defaults
  32:../../libDaisy//src/sys/system.h ****          ** CPU Freq set to 400MHz
  33:../../libDaisy//src/sys/system.h ****          ** Cache Enabled
  34:../../libDaisy//src/sys/system.h ****          ** */
  35:../../libDaisy//src/sys/system.h ****         void Defaults()
  36:../../libDaisy//src/sys/system.h ****         {
  37:../../libDaisy//src/sys/system.h ****             cpu_freq    = SysClkFreq::FREQ_400MHZ;
  38:../../libDaisy//src/sys/system.h ****             use_dcache  = true;
  39:../../libDaisy//src/sys/system.h ****             use_icache  = true;
  40:../../libDaisy//src/sys/system.h ****             skip_clocks = false;
  41:../../libDaisy//src/sys/system.h ****         }
  42:../../libDaisy//src/sys/system.h **** 
  43:../../libDaisy//src/sys/system.h ****         /** Method to call on the struct to set to boost mode:
  44:../../libDaisy//src/sys/system.h ****          ** CPU Freq set to 480MHz
  45:../../libDaisy//src/sys/system.h ****          ** Cache Enabled
  46:../../libDaisy//src/sys/system.h ****          ** */
  47:../../libDaisy//src/sys/system.h ****         void Boost()
  48:../../libDaisy//src/sys/system.h ****         {
ARM GAS  C:\Users\kgpol\AppData\Local\Temp\ccDNfb9N.s 			page 4


  49:../../libDaisy//src/sys/system.h ****             cpu_freq    = SysClkFreq::FREQ_480MHZ;
  50:../../libDaisy//src/sys/system.h ****             use_dcache  = true;
  51:../../libDaisy//src/sys/system.h ****             use_icache  = true;
  52:../../libDaisy//src/sys/system.h ****             skip_clocks = false;
  53:../../libDaisy//src/sys/system.h ****         }
  54:../../libDaisy//src/sys/system.h **** 
  55:../../libDaisy//src/sys/system.h ****         SysClkFreq cpu_freq;
  56:../../libDaisy//src/sys/system.h ****         bool       use_dcache;
  57:../../libDaisy//src/sys/system.h ****         bool       use_icache;
  58:../../libDaisy//src/sys/system.h ****         bool       skip_clocks;
  59:../../libDaisy//src/sys/system.h ****     };
  60:../../libDaisy//src/sys/system.h **** 
  61:../../libDaisy//src/sys/system.h ****     /** Describes the different regions of memory available to the Daisy */
  62:../../libDaisy//src/sys/system.h ****     enum MemoryRegion
  63:../../libDaisy//src/sys/system.h ****     {
  64:../../libDaisy//src/sys/system.h ****         INTERNAL_FLASH = 0,
  65:../../libDaisy//src/sys/system.h ****         ITCMRAM,
  66:../../libDaisy//src/sys/system.h ****         DTCMRAM,
  67:../../libDaisy//src/sys/system.h ****         SRAM_D1,
  68:../../libDaisy//src/sys/system.h ****         SRAM_D2,
  69:../../libDaisy//src/sys/system.h ****         SRAM_D3,
  70:../../libDaisy//src/sys/system.h ****         SDRAM,
  71:../../libDaisy//src/sys/system.h ****         QSPI,
  72:../../libDaisy//src/sys/system.h ****         INVALID_ADDRESS,
  73:../../libDaisy//src/sys/system.h ****     };
  74:../../libDaisy//src/sys/system.h **** 
  75:../../libDaisy//src/sys/system.h ****     /** Bootloader struct for controlling bootloading parameters */
  76:../../libDaisy//src/sys/system.h ****     struct BootInfo
  77:../../libDaisy//src/sys/system.h ****     {
  78:../../libDaisy//src/sys/system.h ****         enum class Type : uint32_t
  79:../../libDaisy//src/sys/system.h ****         {
  80:../../libDaisy//src/sys/system.h ****             INVALID      = 0x00000000,
  81:../../libDaisy//src/sys/system.h ****             JUMP         = 0xDEADBEEF,
  82:../../libDaisy//src/sys/system.h ****             SKIP_TIMEOUT = 0x5AFEB007,
  83:../../libDaisy//src/sys/system.h ****             INF_TIMEOUT  = 0xB0074EFA,
  84:../../libDaisy//src/sys/system.h ****         } status;
  85:../../libDaisy//src/sys/system.h ****         uint32_t data;
  86:../../libDaisy//src/sys/system.h ****         enum class Version : uint32_t
  87:../../libDaisy//src/sys/system.h ****         {
  88:../../libDaisy//src/sys/system.h ****             LT_v6_0 = 0, // Less than v6.0
  89:../../libDaisy//src/sys/system.h ****             NONE,        // No bootloader present
  90:../../libDaisy//src/sys/system.h ****             v6_0,        // v6.0
  91:../../libDaisy//src/sys/system.h ****             v6_1,        // v6.1 or greater
  92:../../libDaisy//src/sys/system.h ****             LAST
  93:../../libDaisy//src/sys/system.h ****         } version;
  94:../../libDaisy//src/sys/system.h ****     };
  95:../../libDaisy//src/sys/system.h **** 
  96:../../libDaisy//src/sys/system.h ****     System() {}
  97:../../libDaisy//src/sys/system.h ****     ~System() {}
  63              		.loc 3 97 5 view .LVU3
  64              		.loc 3 97 5 is_stmt 0 view .LVU4
  65              	.LBE96:
  66              	.LBB97:
  67              	.LBI97:
  68              		.file 4 "../../libDaisy//src/hid/usb.h"
   1:../../libDaisy//src/hid/usb.h **** #pragma once
   2:../../libDaisy//src/hid/usb.h **** #ifndef DSY_HID_USB_H
ARM GAS  C:\Users\kgpol\AppData\Local\Temp\ccDNfb9N.s 			page 5


   3:../../libDaisy//src/hid/usb.h **** #define DSY_HID_USB_H
   4:../../libDaisy//src/hid/usb.h **** #include <stdint.h>
   5:../../libDaisy//src/hid/usb.h **** #include <stdlib.h>
   6:../../libDaisy//src/hid/usb.h **** 
   7:../../libDaisy//src/hid/usb.h **** namespace daisy
   8:../../libDaisy//src/hid/usb.h **** /** @addtogroup human_interface
   9:../../libDaisy//src/hid/usb.h ****     @{
  10:../../libDaisy//src/hid/usb.h **** */
  11:../../libDaisy//src/hid/usb.h **** 
  12:../../libDaisy//src/hid/usb.h **** {
  13:../../libDaisy//src/hid/usb.h **** /** 
  14:../../libDaisy//src/hid/usb.h ****     @brief Interface for initializing and using the USB Peripherals on the daisy
  15:../../libDaisy//src/hid/usb.h ****     @author Stephen Hensley
  16:../../libDaisy//src/hid/usb.h ****     @date December 2019
  17:../../libDaisy//src/hid/usb.h **** */
  18:../../libDaisy//src/hid/usb.h **** class UsbHandle
  19:../../libDaisy//src/hid/usb.h **** {
  20:../../libDaisy//src/hid/usb.h ****   public:
  21:../../libDaisy//src/hid/usb.h ****     /** Return values for USBHandle Functions */
  22:../../libDaisy//src/hid/usb.h ****     enum class Result
  23:../../libDaisy//src/hid/usb.h ****     {
  24:../../libDaisy//src/hid/usb.h ****         OK,
  25:../../libDaisy//src/hid/usb.h ****         ERR,
  26:../../libDaisy//src/hid/usb.h ****     };
  27:../../libDaisy//src/hid/usb.h **** 
  28:../../libDaisy//src/hid/usb.h ****     /** Specified which of the two USB Peripherals to initialize. */
  29:../../libDaisy//src/hid/usb.h ****     enum UsbPeriph
  30:../../libDaisy//src/hid/usb.h ****     {
  31:../../libDaisy//src/hid/usb.h ****         FS_INTERNAL, /**< Internal pin */
  32:../../libDaisy//src/hid/usb.h ****         FS_EXTERNAL, /**< FS External D+ pin is Pin 38 (GPIO32). FS External D- pin is Pin 37 (GPIO
  33:../../libDaisy//src/hid/usb.h ****         FS_BOTH,     /**< Both */
  34:../../libDaisy//src/hid/usb.h ****     };
  35:../../libDaisy//src/hid/usb.h **** 
  36:../../libDaisy//src/hid/usb.h **** 
  37:../../libDaisy//src/hid/usb.h ****     /** Function called upon reception of a buffer */
  38:../../libDaisy//src/hid/usb.h ****     typedef void (*ReceiveCallback)(uint8_t* buff, uint32_t* len);
  39:../../libDaisy//src/hid/usb.h **** 
  40:../../libDaisy//src/hid/usb.h ****     UsbHandle() {}
  41:../../libDaisy//src/hid/usb.h **** 
  42:../../libDaisy//src/hid/usb.h ****     ~UsbHandle() {}
  69              		.loc 4 42 5 is_stmt 1 view .LVU5
  70              		.loc 4 42 5 is_stmt 0 view .LVU6
  71              	.LBE97:
  72              	.LBB98:
  73              	.LBI98:
  74              		.file 5 "../../libDaisy//src/per/adc.h"
   1:../../libDaisy//src/per/adc.h **** #pragma once
   2:../../libDaisy//src/per/adc.h **** #ifndef DSY_ADC_H
   3:../../libDaisy//src/per/adc.h **** #define DSY_ADC_H /**< Macro */
   4:../../libDaisy//src/per/adc.h **** #include <stdint.h>
   5:../../libDaisy//src/per/adc.h **** #include <stdlib.h>
   6:../../libDaisy//src/per/adc.h **** #include "daisy_core.h"
   7:../../libDaisy//src/per/adc.h **** #include "per/gpio.h"
   8:../../libDaisy//src/per/adc.h **** 
   9:../../libDaisy//src/per/adc.h **** #define DSY_ADC_MAX_CHANNELS 16 /**< Maximum number of ADC channels */
  10:../../libDaisy//src/per/adc.h **** 
  11:../../libDaisy//src/per/adc.h **** namespace daisy
ARM GAS  C:\Users\kgpol\AppData\Local\Temp\ccDNfb9N.s 			page 6


  12:../../libDaisy//src/per/adc.h **** {
  13:../../libDaisy//src/per/adc.h **** /** @addtogroup per_analog
  14:../../libDaisy//src/per/adc.h ****     @{
  15:../../libDaisy//src/per/adc.h **** */
  16:../../libDaisy//src/per/adc.h **** 
  17:../../libDaisy//src/per/adc.h **** /* While there may not be many configuration options here,
  18:../../libDaisy//src/per/adc.h **** using a struct like this allows us to add more configuration
  19:../../libDaisy//src/per/adc.h **** later without breaking existing functionality.
  20:../../libDaisy//src/per/adc.h **** */
  21:../../libDaisy//src/per/adc.h **** 
  22:../../libDaisy//src/per/adc.h **** /** @brief   Configuration Structure for an ADC Channel 
  23:../../libDaisy//src/per/adc.h ****  *  @details This can be used to configure a a single input, 
  24:../../libDaisy//src/per/adc.h ****  *           or a multiplexed input, allowing up to 8 inputs on 
  25:../../libDaisy//src/per/adc.h ****  *           one channel.
  26:../../libDaisy//src/per/adc.h ****  *  @note    Sharing data lines to multiple muxes _is_ possible, but
  27:../../libDaisy//src/per/adc.h ****  *           each channel sharing data lines must be set to the maximum
  28:../../libDaisy//src/per/adc.h ****  *           number of channels, even if some multiplexers have fewer
  29:../../libDaisy//src/per/adc.h ****  *           inputs connected.
  30:../../libDaisy//src/per/adc.h **** */
  31:../../libDaisy//src/per/adc.h **** struct AdcChannelConfig
  32:../../libDaisy//src/per/adc.h **** {
  33:../../libDaisy//src/per/adc.h ****     /** Which pin to use for multiplexing */
  34:../../libDaisy//src/per/adc.h ****     enum MuxPin
  35:../../libDaisy//src/per/adc.h ****     {
  36:../../libDaisy//src/per/adc.h ****         MUX_SEL_0,    /**< & */
  37:../../libDaisy//src/per/adc.h ****         MUX_SEL_1,    /**< & */
  38:../../libDaisy//src/per/adc.h ****         MUX_SEL_2,    /**< & */
  39:../../libDaisy//src/per/adc.h ****         MUX_SEL_LAST, /**< & */
  40:../../libDaisy//src/per/adc.h ****     };
  41:../../libDaisy//src/per/adc.h **** 
  42:../../libDaisy//src/per/adc.h ****     /** \brief per channel conversion speed added to fixed time based on bitdepth, etc. */
  43:../../libDaisy//src/per/adc.h ****     enum ConversionSpeed
  44:../../libDaisy//src/per/adc.h ****     {
  45:../../libDaisy//src/per/adc.h ****         SPEED_1CYCLES_5,
  46:../../libDaisy//src/per/adc.h ****         SPEED_2CYCLES_5,
  47:../../libDaisy//src/per/adc.h ****         SPEED_8CYCLES_5,
  48:../../libDaisy//src/per/adc.h ****         SPEED_16CYCLES_5,
  49:../../libDaisy//src/per/adc.h ****         SPEED_32CYCLES_5,
  50:../../libDaisy//src/per/adc.h ****         SPEED_64CYCLES_5,
  51:../../libDaisy//src/per/adc.h ****         SPEED_387CYCLES_5,
  52:../../libDaisy//src/per/adc.h ****         SPEED_810CYCLES_5,
  53:../../libDaisy//src/per/adc.h ****     };
  54:../../libDaisy//src/per/adc.h **** 
  55:../../libDaisy//src/per/adc.h ****     /** Initializes a single ADC pin as an ADC. 
  56:../../libDaisy//src/per/adc.h ****     \param pin Pin to init.
  57:../../libDaisy//src/per/adc.h ****     \param speed conversion speed for this pin defaults to 8.5 cycles
  58:../../libDaisy//src/per/adc.h ****      */
  59:../../libDaisy//src/per/adc.h ****     void InitSingle(dsy_gpio_pin pin, ConversionSpeed speed = SPEED_8CYCLES_5);
  60:../../libDaisy//src/per/adc.h **** 
  61:../../libDaisy//src/per/adc.h ****     /** 
  62:../../libDaisy//src/per/adc.h ****     Initializes a single ADC pin as a Multiplexed ADC.
  63:../../libDaisy//src/per/adc.h ****     Requires a CD405X Multiplexer connected to the pin.
  64:../../libDaisy//src/per/adc.h ****     You only need to supply the mux pins that are required,
  65:../../libDaisy//src/per/adc.h ****     e.g. a 4052 mux would only require mux_0 and mux_1.
  66:../../libDaisy//src/per/adc.h ****     Internal Callbacks handle the pin addressing.
  67:../../libDaisy//src/per/adc.h ****     \param adc_pin &
  68:../../libDaisy//src/per/adc.h ****     \param mux_channels must be 1-8
ARM GAS  C:\Users\kgpol\AppData\Local\Temp\ccDNfb9N.s 			page 7


  69:../../libDaisy//src/per/adc.h ****     \param mux_0 First mux pin
  70:../../libDaisy//src/per/adc.h ****     \param mux_1 Second mux pin
  71:../../libDaisy//src/per/adc.h ****     \param mux_2 Third mux pin
  72:../../libDaisy//src/per/adc.h ****     \param speed conversion speed for this pin defaults to 8.5 cycles
  73:../../libDaisy//src/per/adc.h ****     */
  74:../../libDaisy//src/per/adc.h ****     void InitMux(dsy_gpio_pin    adc_pin,
  75:../../libDaisy//src/per/adc.h ****                  size_t          mux_channels,
  76:../../libDaisy//src/per/adc.h ****                  dsy_gpio_pin    mux_0,
  77:../../libDaisy//src/per/adc.h ****                  dsy_gpio_pin    mux_1 = {DSY_GPIOX, 0},
  78:../../libDaisy//src/per/adc.h ****                  dsy_gpio_pin    mux_2 = {DSY_GPIOX, 0},
  79:../../libDaisy//src/per/adc.h ****                  ConversionSpeed speed = SPEED_8CYCLES_5);
  80:../../libDaisy//src/per/adc.h **** 
  81:../../libDaisy//src/per/adc.h ****     dsy_gpio        pin_;                   /**< & */
  82:../../libDaisy//src/per/adc.h ****     dsy_gpio        mux_pin_[MUX_SEL_LAST]; /**< & */
  83:../../libDaisy//src/per/adc.h ****     uint8_t         mux_channels_;          /**< & */
  84:../../libDaisy//src/per/adc.h ****     ConversionSpeed speed_;
  85:../../libDaisy//src/per/adc.h **** };
  86:../../libDaisy//src/per/adc.h **** 
  87:../../libDaisy//src/per/adc.h **** /**
  88:../../libDaisy//src/per/adc.h ****    @brief Handler for analog to digital conversion
  89:../../libDaisy//src/per/adc.h **** */
  90:../../libDaisy//src/per/adc.h **** class AdcHandle
  91:../../libDaisy//src/per/adc.h **** {
  92:../../libDaisy//src/per/adc.h ****   public:
  93:../../libDaisy//src/per/adc.h ****     /** Supported oversampling amounts */
  94:../../libDaisy//src/per/adc.h ****     enum OverSampling
  95:../../libDaisy//src/per/adc.h ****     {
  96:../../libDaisy//src/per/adc.h ****         OVS_NONE, /**< & */
  97:../../libDaisy//src/per/adc.h ****         OVS_4,    /**< & */
  98:../../libDaisy//src/per/adc.h ****         OVS_8,    /**< & */
  99:../../libDaisy//src/per/adc.h ****         OVS_16,   /**< & */
 100:../../libDaisy//src/per/adc.h ****         OVS_32,   /**< & */
 101:../../libDaisy//src/per/adc.h ****         OVS_64,   /**< & */
 102:../../libDaisy//src/per/adc.h ****         OVS_128,  /**< & */
 103:../../libDaisy//src/per/adc.h ****         OVS_256,  /**< & */
 104:../../libDaisy//src/per/adc.h ****         OVS_512,  /**< & */
 105:../../libDaisy//src/per/adc.h ****         OVS_1024, /**< & */
 106:../../libDaisy//src/per/adc.h ****         OVS_LAST, /**< & */
 107:../../libDaisy//src/per/adc.h ****     };
 108:../../libDaisy//src/per/adc.h **** 
 109:../../libDaisy//src/per/adc.h ****     AdcHandle() {}
 110:../../libDaisy//src/per/adc.h ****     ~AdcHandle() {}
  75              		.loc 5 110 5 is_stmt 1 view .LVU7
  76              		.loc 5 110 5 is_stmt 0 view .LVU8
  77              	.LBE98:
  78              	.LBB99:
  79              	.LBI99:
  80              		.file 6 "../../libDaisy//src/hid/audio.h"
   1:../../libDaisy//src/hid/audio.h **** #ifndef DSY_AUDIO_H
   2:../../libDaisy//src/hid/audio.h **** #define DSY_AUDIO_H /**< & */
   3:../../libDaisy//src/hid/audio.h **** 
   4:../../libDaisy//src/hid/audio.h **** #include "per/sai.h"
   5:../../libDaisy//src/hid/audio.h **** 
   6:../../libDaisy//src/hid/audio.h **** namespace daisy
   7:../../libDaisy//src/hid/audio.h **** {
   8:../../libDaisy//src/hid/audio.h **** /** @brief Audio Engine Handle
   9:../../libDaisy//src/hid/audio.h ****  *  @ingroup audio 
ARM GAS  C:\Users\kgpol\AppData\Local\Temp\ccDNfb9N.s 			page 8


  10:../../libDaisy//src/hid/audio.h ****  *  @details This class allows for higher level access to an audio engine.
  11:../../libDaisy//src/hid/audio.h ****  *           If you're using a SOM like the DaisySeed or DaisyPatchSM (or any 
  12:../../libDaisy//src/hid/audio.h ****  *            board that includes one of those objects) then the intialization
  13:../../libDaisy//src/hid/audio.h ****  *            is already taken  care of.
  14:../../libDaisy//src/hid/audio.h ****  *           If you're setting up your own custom hardware, or need to make changes
  15:../../libDaisy//src/hid/audio.h ****  *           you will have to take the following steps:
  16:../../libDaisy//src/hid/audio.h ****  *             1. Create and Initialize an SaiHandle or two depending on your requirements
  17:../../libDaisy//src/hid/audio.h ****  *             2. Initialize the Audio Handle with the desired settings and the Initialized SaiHand
  18:../../libDaisy//src/hid/audio.h ****  *             3. If the connected codec requires special configuration or initialization, do so
  19:../../libDaisy//src/hid/audio.h ****  *             4. Write a callback method using either the AudioCallback or the InterleavingAudioCa
  20:../../libDaisy//src/hid/audio.h ****  *             5. Start the Audio using one of the StartAudio function
  21:../../libDaisy//src/hid/audio.h ****  */
  22:../../libDaisy//src/hid/audio.h **** class AudioHandle
  23:../../libDaisy//src/hid/audio.h **** {
  24:../../libDaisy//src/hid/audio.h ****   public:
  25:../../libDaisy//src/hid/audio.h ****     /** Manually configurable details about the Audio Engine */
  26:../../libDaisy//src/hid/audio.h ****     /** TODO: Figure out how to get samplerate in here. */
  27:../../libDaisy//src/hid/audio.h ****     struct Config
  28:../../libDaisy//src/hid/audio.h ****     {
  29:../../libDaisy//src/hid/audio.h ****         /** number of samples to process per callback */
  30:../../libDaisy//src/hid/audio.h ****         size_t blocksize;
  31:../../libDaisy//src/hid/audio.h **** 
  32:../../libDaisy//src/hid/audio.h ****         /**< Sample rate of audio */
  33:../../libDaisy//src/hid/audio.h ****         SaiHandle::Config::SampleRate samplerate;
  34:../../libDaisy//src/hid/audio.h **** 
  35:../../libDaisy//src/hid/audio.h ****         /** factor for adjustment before and after callback for hardware that may have extra headro
  36:../../libDaisy//src/hid/audio.h ****         float postgain;
  37:../../libDaisy//src/hid/audio.h **** 
  38:../../libDaisy//src/hid/audio.h ****         /** factor for additional one-sided compensation to audio path for hardware that may
  39:../../libDaisy//src/hid/audio.h ****          *  have unequal input/output ranges
  40:../../libDaisy//src/hid/audio.h ****          */
  41:../../libDaisy//src/hid/audio.h ****         float output_compensation;
  42:../../libDaisy//src/hid/audio.h **** 
  43:../../libDaisy//src/hid/audio.h ****         /** Sets default values for config struct */
  44:../../libDaisy//src/hid/audio.h ****         Config()
  45:../../libDaisy//src/hid/audio.h ****         : blocksize(48),
  46:../../libDaisy//src/hid/audio.h ****           samplerate(SaiHandle::Config::SampleRate::SAI_48KHZ),
  47:../../libDaisy//src/hid/audio.h ****           postgain(1.f),
  48:../../libDaisy//src/hid/audio.h ****           output_compensation(1.f)
  49:../../libDaisy//src/hid/audio.h ****         {
  50:../../libDaisy//src/hid/audio.h ****         }
  51:../../libDaisy//src/hid/audio.h ****     };
  52:../../libDaisy//src/hid/audio.h **** 
  53:../../libDaisy//src/hid/audio.h ****     enum class Result
  54:../../libDaisy//src/hid/audio.h ****     {
  55:../../libDaisy//src/hid/audio.h ****         OK,
  56:../../libDaisy//src/hid/audio.h ****         ERR,
  57:../../libDaisy//src/hid/audio.h ****     };
  58:../../libDaisy//src/hid/audio.h **** 
  59:../../libDaisy//src/hid/audio.h ****     /** Non-Interleaving input buffer
  60:../../libDaisy//src/hid/audio.h ****      * Buffer arranged by float[chn][sample] 
  61:../../libDaisy//src/hid/audio.h ****      * const so that the user can't modify the input
  62:../../libDaisy//src/hid/audio.h ****      */
  63:../../libDaisy//src/hid/audio.h ****     typedef const float* const* InputBuffer;
  64:../../libDaisy//src/hid/audio.h **** 
  65:../../libDaisy//src/hid/audio.h ****     /** Non-Interleaving output buffer
  66:../../libDaisy//src/hid/audio.h ****      * Arranged by float[chn][sample] 
ARM GAS  C:\Users\kgpol\AppData\Local\Temp\ccDNfb9N.s 			page 9


  67:../../libDaisy//src/hid/audio.h ****      */
  68:../../libDaisy//src/hid/audio.h ****     typedef float** OutputBuffer;
  69:../../libDaisy//src/hid/audio.h **** 
  70:../../libDaisy//src/hid/audio.h ****     /** Type for a Non-Interleaving audio callback 
  71:../../libDaisy//src/hid/audio.h ****      * Non-Interleaving audio callbacks in daisy will be of this type
  72:../../libDaisy//src/hid/audio.h ****      */
  73:../../libDaisy//src/hid/audio.h ****     typedef void (*AudioCallback)(InputBuffer  in,
  74:../../libDaisy//src/hid/audio.h ****                                   OutputBuffer out,
  75:../../libDaisy//src/hid/audio.h ****                                   size_t       size);
  76:../../libDaisy//src/hid/audio.h **** 
  77:../../libDaisy//src/hid/audio.h ****     /** Interleaving Input buffer
  78:../../libDaisy//src/hid/audio.h ****      ** audio is prepared as { L0, R0, L1, R1, . . . LN, RN }]
  79:../../libDaisy//src/hid/audio.h ****      ** this is const, as the user shouldn't modify it
  80:../../libDaisy//src/hid/audio.h ****     */
  81:../../libDaisy//src/hid/audio.h ****     typedef const float* InterleavingInputBuffer;
  82:../../libDaisy//src/hid/audio.h **** 
  83:../../libDaisy//src/hid/audio.h ****     /** Interleaving Output buffer 
  84:../../libDaisy//src/hid/audio.h ****      ** audio is prepared as { L0, R0, L1, R1, . . . LN, RN }
  85:../../libDaisy//src/hid/audio.h ****     */
  86:../../libDaisy//src/hid/audio.h ****     typedef float* InterleavingOutputBuffer;
  87:../../libDaisy//src/hid/audio.h **** 
  88:../../libDaisy//src/hid/audio.h ****     /** Interleaving Audio Callback 
  89:../../libDaisy//src/hid/audio.h ****      * Interleaving audio callbacks in daisy must be of this type
  90:../../libDaisy//src/hid/audio.h ****      */
  91:../../libDaisy//src/hid/audio.h ****     typedef void (*InterleavingAudioCallback)(InterleavingInputBuffer  in,
  92:../../libDaisy//src/hid/audio.h ****                                               InterleavingOutputBuffer out,
  93:../../libDaisy//src/hid/audio.h ****                                               size_t                   size);
  94:../../libDaisy//src/hid/audio.h **** 
  95:../../libDaisy//src/hid/audio.h ****     AudioHandle() : pimpl_(nullptr) {}
  96:../../libDaisy//src/hid/audio.h ****     ~AudioHandle() {}
  81              		.loc 6 96 5 is_stmt 1 view .LVU9
  82              		.loc 6 96 5 is_stmt 0 view .LVU10
  83              	.LBE99:
  84              		.loc 2 22 19 view .LVU11
  85 0000 7047     		bx	lr
  86              		.cfi_endproc
  87              	.LFE2555:
  89              		.weak	_ZN5daisy9DaisySeedD1Ev
  90              		.thumb_set _ZN5daisy9DaisySeedD1Ev,_ZN5daisy9DaisySeedD2Ev
  91 0002 00BF     		.section	.text._ZN7daisysp14AnalogBassDrumD2Ev,"axG",%progbits,_ZN7daisysp14AnalogBassDrumD5Ev,com
  92              		.align	1
  93              		.p2align 2,,3
  94              		.weak	_ZN7daisysp14AnalogBassDrumD2Ev
  95              		.syntax unified
  96              		.thumb
  97              		.thumb_func
  98              		.fpu fpv5-d16
 100              	_ZN7daisysp14AnalogBassDrumD2Ev:
 101              	.LVL2:
 102              	.LFB4268:
 103              		.file 7 "../../DaisySP//Source/Drums/analogbassdrum.h"
   1:../../DaisySP//Source/Drums/analogbassdrum.h **** /*
   2:../../DaisySP//Source/Drums/analogbassdrum.h **** Copyright (c) 2020 Electrosmith, Corp, Emilie Gillet
   3:../../DaisySP//Source/Drums/analogbassdrum.h **** 
   4:../../DaisySP//Source/Drums/analogbassdrum.h **** Use of this source code is governed by an MIT-style
   5:../../DaisySP//Source/Drums/analogbassdrum.h **** license that can be found in the LICENSE file or at
   6:../../DaisySP//Source/Drums/analogbassdrum.h **** https://opensource.org/licenses/MIT.
ARM GAS  C:\Users\kgpol\AppData\Local\Temp\ccDNfb9N.s 			page 10


   7:../../DaisySP//Source/Drums/analogbassdrum.h **** */
   8:../../DaisySP//Source/Drums/analogbassdrum.h **** 
   9:../../DaisySP//Source/Drums/analogbassdrum.h **** #pragma once
  10:../../DaisySP//Source/Drums/analogbassdrum.h **** #ifndef DSY_ANALOG_BD_H
  11:../../DaisySP//Source/Drums/analogbassdrum.h **** #define DSY_ANALOG_BD_H
  12:../../DaisySP//Source/Drums/analogbassdrum.h **** 
  13:../../DaisySP//Source/Drums/analogbassdrum.h **** #include <stdint.h>
  14:../../DaisySP//Source/Drums/analogbassdrum.h **** #ifdef __cplusplus
  15:../../DaisySP//Source/Drums/analogbassdrum.h **** 
  16:../../DaisySP//Source/Drums/analogbassdrum.h **** #include "Synthesis/oscillator.h"
  17:../../DaisySP//Source/Drums/analogbassdrum.h **** #include "Filters/svf.h"
  18:../../DaisySP//Source/Drums/analogbassdrum.h **** 
  19:../../DaisySP//Source/Drums/analogbassdrum.h **** /** @file analogbassdrum.h */
  20:../../DaisySP//Source/Drums/analogbassdrum.h **** 
  21:../../DaisySP//Source/Drums/analogbassdrum.h **** namespace daisysp
  22:../../DaisySP//Source/Drums/analogbassdrum.h **** {
  23:../../DaisySP//Source/Drums/analogbassdrum.h **** /**  
  24:../../DaisySP//Source/Drums/analogbassdrum.h ****        @brief 808 bass drum model, revisited.
  25:../../DaisySP//Source/Drums/analogbassdrum.h ****        @author Ben Sergentanis
  26:../../DaisySP//Source/Drums/analogbassdrum.h ****        @date Jan 2021 
  27:../../DaisySP//Source/Drums/analogbassdrum.h ****        Ported from pichenettes/eurorack/plaits/dsp/drums/analog_bass_drum.h \n
  28:../../DaisySP//Source/Drums/analogbassdrum.h ****        to an independent module. \n
  29:../../DaisySP//Source/Drums/analogbassdrum.h ****        Original code written by Emilie Gillet in 2016. \n
  30:../../DaisySP//Source/Drums/analogbassdrum.h **** */
  31:../../DaisySP//Source/Drums/analogbassdrum.h **** class AnalogBassDrum
  32:../../DaisySP//Source/Drums/analogbassdrum.h **** {
  33:../../DaisySP//Source/Drums/analogbassdrum.h ****   public:
  34:../../DaisySP//Source/Drums/analogbassdrum.h ****     AnalogBassDrum() {}
  35:../../DaisySP//Source/Drums/analogbassdrum.h ****     ~AnalogBassDrum() {}
 104              		.loc 7 35 5 is_stmt 1 view -0
 105              		.cfi_startproc
 106              		@ args = 0, pretend = 0, frame = 0
 107              		@ frame_needed = 0, uses_anonymous_args = 0
 108              		@ link register save eliminated.
 109              	.LBB100:
 110              	.LBI100:
 111              		.file 8 "../../DaisySP//Source/Filters/svf.h"
   1:../../DaisySP//Source/Filters/svf.h **** /*
   2:../../DaisySP//Source/Filters/svf.h **** Copyright (c) 2020 Electrosmith, Corp
   3:../../DaisySP//Source/Filters/svf.h **** 
   4:../../DaisySP//Source/Filters/svf.h **** Use of this source code is governed by an MIT-style
   5:../../DaisySP//Source/Filters/svf.h **** license that can be found in the LICENSE file or at
   6:../../DaisySP//Source/Filters/svf.h **** https://opensource.org/licenses/MIT.
   7:../../DaisySP//Source/Filters/svf.h **** */
   8:../../DaisySP//Source/Filters/svf.h **** 
   9:../../DaisySP//Source/Filters/svf.h **** #pragma once
  10:../../DaisySP//Source/Filters/svf.h **** #ifndef DSY_SVF_H
  11:../../DaisySP//Source/Filters/svf.h **** #define DSY_SVF_H
  12:../../DaisySP//Source/Filters/svf.h **** 
  13:../../DaisySP//Source/Filters/svf.h **** namespace daisysp
  14:../../DaisySP//Source/Filters/svf.h **** {
  15:../../DaisySP//Source/Filters/svf.h **** /**      Double Sampled, Stable State Variable Filter
  16:../../DaisySP//Source/Filters/svf.h **** 
  17:../../DaisySP//Source/Filters/svf.h **** Credit to Andrew Simper from musicdsp.org
  18:../../DaisySP//Source/Filters/svf.h **** 
  19:../../DaisySP//Source/Filters/svf.h **** This is his "State Variable Filter (Double Sampled, Stable)"
  20:../../DaisySP//Source/Filters/svf.h **** 
ARM GAS  C:\Users\kgpol\AppData\Local\Temp\ccDNfb9N.s 			page 11


  21:../../DaisySP//Source/Filters/svf.h **** Additional thanks to Laurent de Soras for stability limit, and 
  22:../../DaisySP//Source/Filters/svf.h **** Stefan Diedrichsen for the correct notch output
  23:../../DaisySP//Source/Filters/svf.h **** 
  24:../../DaisySP//Source/Filters/svf.h **** Ported by: Stephen Hensley
  25:../../DaisySP//Source/Filters/svf.h **** */
  26:../../DaisySP//Source/Filters/svf.h **** class Svf
  27:../../DaisySP//Source/Filters/svf.h **** {
  28:../../DaisySP//Source/Filters/svf.h ****   public:
  29:../../DaisySP//Source/Filters/svf.h ****     Svf() {}
  30:../../DaisySP//Source/Filters/svf.h ****     ~Svf() {}
 112              		.loc 8 30 5 view .LVU13
 113              		.loc 8 30 5 is_stmt 0 view .LVU14
 114              	.LBE100:
 115              		.loc 7 35 24 view .LVU15
 116 0000 7047     		bx	lr
 117              		.cfi_endproc
 118              	.LFE4268:
 120              		.weak	_ZN7daisysp14AnalogBassDrumD1Ev
 121              		.thumb_set _ZN7daisysp14AnalogBassDrumD1Ev,_ZN7daisysp14AnalogBassDrumD2Ev
 122 0002 00BF     		.section	.text._Z13AudioCallbackPKPKfPPfj,"ax",%progbits
 123              		.align	1
 124              		.p2align 2,,3
 125              		.global	_Z13AudioCallbackPKPKfPPfj
 126              		.syntax unified
 127              		.thumb
 128              		.thumb_func
 129              		.fpu fpv5-d16
 131              	_Z13AudioCallbackPKPKfPPfj:
 132              	.LVL3:
 133              	.LFB4681:
 134              		.file 9 "BassDrum.cpp"
   1:BassDrum.cpp  **** #include "daisy_seed.h"
   2:BassDrum.cpp  **** #include "daisysp.h"
   3:BassDrum.cpp  **** 
   4:BassDrum.cpp  **** using namespace daisy;
   5:BassDrum.cpp  **** using namespace daisysp;
   6:BassDrum.cpp  **** 
   7:BassDrum.cpp  **** 
   8:BassDrum.cpp  **** DaisySeed      hw;
   9:BassDrum.cpp  **** AnalogBassDrum bd;
  10:BassDrum.cpp  **** Switch         sw_1;
  11:BassDrum.cpp  **** 
  12:BassDrum.cpp  **** // ------------------------------------------------------------------------------
  13:BassDrum.cpp  **** //
  14:BassDrum.cpp  **** // ------------------------------------------------------------------------------
  15:BassDrum.cpp  **** 
  16:BassDrum.cpp  **** #define NUM_ADC_CHANNELS	5
  17:BassDrum.cpp  **** #define FREQ_PIN 			19
  18:BassDrum.cpp  **** #define DECAY_PIN 			20
  19:BassDrum.cpp  **** #define TONE_PIN			21
  20:BassDrum.cpp  **** #define FREQ_CV_PIN			16
  21:BassDrum.cpp  **** #define DECAY_CV_PIN		17
  22:BassDrum.cpp  **** 
  23:BassDrum.cpp  **** #define TRIG_PIN			15
  24:BassDrum.cpp  **** 
  25:BassDrum.cpp  **** #define MIN_FREQ			30
  26:BassDrum.cpp  **** #define FREQ_RANGE			50
ARM GAS  C:\Users\kgpol\AppData\Local\Temp\ccDNfb9N.s 			page 12


  27:BassDrum.cpp  **** 
  28:BassDrum.cpp  **** // ------------------------------------------------------------------------------
  29:BassDrum.cpp  **** //
  30:BassDrum.cpp  **** // ------------------------------------------------------------------------------
  31:BassDrum.cpp  **** 
  32:BassDrum.cpp  **** void AudioCallback(AudioHandle::InputBuffer  in,
  33:BassDrum.cpp  ****                    AudioHandle::OutputBuffer out,
  34:BassDrum.cpp  ****                    size_t                    size)
  35:BassDrum.cpp  **** {
 135              		.loc 9 35 1 is_stmt 1 view -0
 136              		.cfi_startproc
 137              		@ args = 0, pretend = 0, frame = 0
 138              		@ frame_needed = 0, uses_anonymous_args = 0
  36:BassDrum.cpp  ****     for(size_t i = 0; i < size; i++)
 139              		.loc 9 36 5 view .LVU17
 140              	.LBB101:
 141              		.loc 9 36 25 view .LVU18
 142 0000 002A     		cmp	r2, #0
 143 0002 68D0     		beq	.L24
 144              	.LBE101:
  35:BassDrum.cpp  ****     for(size_t i = 0; i < size; i++)
 145              		.loc 9 35 1 is_stmt 0 view .LVU19
 146 0004 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 147              		.cfi_def_cfa_offset 32
 148              		.cfi_offset 3, -32
 149              		.cfi_offset 4, -28
 150              		.cfi_offset 5, -24
 151              		.cfi_offset 6, -20
 152              		.cfi_offset 7, -16
 153              		.cfi_offset 8, -12
 154              		.cfi_offset 9, -8
 155              		.cfi_offset 14, -4
 156 0008 0E46     		mov	r6, r1
 157 000a 9046     		mov	r8, r2
 158              	.LBB114:
 159              		.loc 9 36 16 view .LVU20
 160 000c 0024     		movs	r4, #0
 161 000e 324F     		ldr	r7, .L28
 162              	.LBE114:
  35:BassDrum.cpp  ****     for(size_t i = 0; i < size; i++)
 163              		.loc 9 35 1 view .LVU21
 164 0010 2DED028B 		vpush.64	{d8}
 165              		.cfi_def_cfa_offset 40
 166              		.cfi_offset 80, -40
 167              		.cfi_offset 81, -36
 168 0014 12E0     		b	.L12
 169              	.LVL4:
 170              	.L13:
 171              	.LBB115:
 172              	.LBB102:
 173              	.LBB103:
 174              	.LBB104:
  43:../../libDaisy//src/hid/switch.h **** 
  44:../../libDaisy//src/hid/switch.h ****     /** 
  45:../../libDaisy//src/hid/switch.h ****     Initializes the switch object with a given port/pin combo.
  46:../../libDaisy//src/hid/switch.h ****     \param pin port/pin object to tell the switch which hardware pin to use.
  47:../../libDaisy//src/hid/switch.h ****     \param update_rate Does nothing. Backwards compatibility until next breaking update.
ARM GAS  C:\Users\kgpol\AppData\Local\Temp\ccDNfb9N.s 			page 13


  48:../../libDaisy//src/hid/switch.h ****     \param t switch type -- Default: TYPE_MOMENTARY
  49:../../libDaisy//src/hid/switch.h ****     \param pol switch polarity -- Default: POLARITY_INVERTED
  50:../../libDaisy//src/hid/switch.h ****     \param pu switch pull up/down -- Default: PULL_UP
  51:../../libDaisy//src/hid/switch.h ****     */
  52:../../libDaisy//src/hid/switch.h ****     void
  53:../../libDaisy//src/hid/switch.h ****     Init(dsy_gpio_pin pin, float update_rate, Type t, Polarity pol, Pull pu);
  54:../../libDaisy//src/hid/switch.h **** 
  55:../../libDaisy//src/hid/switch.h ****     /**
  56:../../libDaisy//src/hid/switch.h ****        Simplified Init.
  57:../../libDaisy//src/hid/switch.h ****        \param pin port/pin object to tell the switch which hardware pin to use.
  58:../../libDaisy//src/hid/switch.h ****        \param update_rate Left for backwards compatibility until next breaking change.
  59:../../libDaisy//src/hid/switch.h ****     */
  60:../../libDaisy//src/hid/switch.h ****     void Init(dsy_gpio_pin pin, float update_rate = 0.f);
  61:../../libDaisy//src/hid/switch.h **** 
  62:../../libDaisy//src/hid/switch.h ****     /** 
  63:../../libDaisy//src/hid/switch.h ****     Called at update_rate to debounce and handle timing for the switch.
  64:../../libDaisy//src/hid/switch.h ****     In order for events not to be missed, its important that the Edge/Pressed checks
  65:../../libDaisy//src/hid/switch.h ****     be made at the same rate as the debounce function is being called.
  66:../../libDaisy//src/hid/switch.h ****     */
  67:../../libDaisy//src/hid/switch.h ****     void Debounce();
  68:../../libDaisy//src/hid/switch.h **** 
  69:../../libDaisy//src/hid/switch.h ****     /** \return true if a button was just pressed. */
  70:../../libDaisy//src/hid/switch.h ****     inline bool RisingEdge() const { return updated_ ? state_ == 0x7f : false; }
 175              		.loc 1 70 54 view .LVU22
 176 0016 0025     		movs	r5, #0
 177              	.LVL5:
 178              	.L7:
 179              		.loc 1 70 54 view .LVU23
 180              	.LBE104:
 181              	.LBE103:
  37:BassDrum.cpp  ****     {
  38:BassDrum.cpp  **** 		sw_1.Debounce();
  39:BassDrum.cpp  **** 		bool t = sw_1.RisingEdge();
  40:BassDrum.cpp  **** 		
  41:BassDrum.cpp  **** 		// If a trigger is received read the controls and set the drum's properties
  42:BassDrum.cpp  **** 		if (t) { 
  43:BassDrum.cpp  **** 			float freqToSet = MIN_FREQ + (hw.adc.GetFloat(0) * 30.f) + (hw.adc.GetFloat(3) * FREQ_RANGE);
  44:BassDrum.cpp  **** 			if (freqToSet > MIN_FREQ + FREQ_RANGE) {
  45:BassDrum.cpp  **** 				freqToSet = MIN_FREQ + FREQ_RANGE;
  46:BassDrum.cpp  **** 			}
  47:BassDrum.cpp  **** 
  48:BassDrum.cpp  **** 			float decayToSet = hw.adc.GetFloat(1) + hw.adc.GetFloat(4);
  49:BassDrum.cpp  **** 			if (decayToSet > 1) {
  50:BassDrum.cpp  **** 				decayToSet = 1.f;
  51:BassDrum.cpp  **** 			}
  52:BassDrum.cpp  **** 
  53:BassDrum.cpp  **** 			bd.SetFreq(freqToSet);
  54:BassDrum.cpp  **** 			bd.SetDecay(decayToSet);
  55:BassDrum.cpp  **** 			bd.SetTone(hw.adc.GetFloat(2));
  56:BassDrum.cpp  **** 		}
  57:BassDrum.cpp  **** 
  58:BassDrum.cpp  ****         out[0][i] = out[1][i] = bd.Process(t);
 182              		.loc 9 58 9 is_stmt 1 discriminator 2 view .LVU24
 183              		.loc 9 58 29 is_stmt 0 discriminator 2 view .LVU25
 184 0018 7368     		ldr	r3, [r6, #4]
 185              		.loc 9 58 43 discriminator 2 view .LVU26
 186 001a 2946     		mov	r1, r5
ARM GAS  C:\Users\kgpol\AppData\Local\Temp\ccDNfb9N.s 			page 14


 187 001c 2F48     		ldr	r0, .L28+4
 188 001e 4FEA8409 		lsl	r9, r4, #2
 189              		.loc 9 58 29 discriminator 2 view .LVU27
 190 0022 03EB8405 		add	r5, r3, r4, lsl #2
 191              	.LBE102:
  36:BassDrum.cpp  ****     {
 192              		.loc 9 36 5 discriminator 2 view .LVU28
 193 0026 0134     		adds	r4, r4, #1
 194              	.LVL6:
 195              	.LBB111:
 196              		.loc 9 58 43 discriminator 2 view .LVU29
 197 0028 FFF7FEFF 		bl	_ZN7daisysp14AnalogBassDrum7ProcessEb
 198              	.LVL7:
 199              		.loc 9 58 19 discriminator 2 view .LVU30
 200 002c 3368     		ldr	r3, [r6]
 201              	.LBE111:
  36:BassDrum.cpp  ****     {
 202              		.loc 9 36 25 discriminator 2 view .LVU31
 203 002e A045     		cmp	r8, r4
 204              	.LBB112:
 205              		.loc 9 58 31 discriminator 2 view .LVU32
 206 0030 85ED000A 		vstr.32	s0, [r5]
 207              		.loc 9 58 19 discriminator 2 view .LVU33
 208 0034 4B44     		add	r3, r3, r9
 209 0036 83ED000A 		vstr.32	s0, [r3]
 210              	.LBE112:
  36:BassDrum.cpp  ****     {
 211              		.loc 9 36 5 is_stmt 1 discriminator 2 view .LVU34
 212              	.LVL8:
  36:BassDrum.cpp  ****     {
 213              		.loc 9 36 25 discriminator 2 view .LVU35
 214 003a 48D0     		beq	.L27
 215              	.LVL9:
 216              	.L12:
 217              	.LBB113:
  38:BassDrum.cpp  **** 		bool t = sw_1.RisingEdge();
 218              		.loc 9 38 3 view .LVU36
  38:BassDrum.cpp  **** 		bool t = sw_1.RisingEdge();
 219              		.loc 9 38 16 is_stmt 0 view .LVU37
 220 003c 2648     		ldr	r0, .L28
 221 003e FFF7FEFF 		bl	_ZN5daisy6Switch8DebounceEv
 222              	.LVL10:
  39:BassDrum.cpp  **** 		
 223              		.loc 9 39 3 is_stmt 1 view .LVU38
 224              	.LBB107:
 225              	.LBI103:
 226              		.loc 1 70 17 view .LVU39
 227              	.LBB105:
 228              		.loc 1 70 38 view .LVU40
 229              		.loc 1 70 38 is_stmt 0 view .LVU41
 230              	.LBE105:
 231              	.LBE107:
  42:BassDrum.cpp  **** 			float freqToSet = MIN_FREQ + (hw.adc.GetFloat(0) * 30.f) + (hw.adc.GetFloat(3) * FREQ_RANGE);
 232              		.loc 9 42 3 is_stmt 1 view .LVU42
 233              	.LBB108:
 234              	.LBB106:
 235              		.loc 1 70 45 is_stmt 0 view .LVU43
ARM GAS  C:\Users\kgpol\AppData\Local\Temp\ccDNfb9N.s 			page 15


 236 0042 3D79     		ldrb	r5, [r7, #4]	@ zero_extendqisi2
 237              		.loc 1 70 54 view .LVU44
 238 0044 002D     		cmp	r5, #0
 239 0046 E7D0     		beq	.L7
 240              	.LBE106:
 241              	.LBE108:
 242              	.LBB109:
  42:BassDrum.cpp  **** 			float freqToSet = MIN_FREQ + (hw.adc.GetFloat(0) * 30.f) + (hw.adc.GetFloat(3) * FREQ_RANGE);
 243              		.loc 9 42 3 view .LVU45
 244 0048 BB7A     		ldrb	r3, [r7, #10]	@ zero_extendqisi2
 245 004a 7F2B     		cmp	r3, #127
 246 004c E3D1     		bne	.L13
 247              	.LBB110:
  43:BassDrum.cpp  **** 			if (freqToSet > MIN_FREQ + FREQ_RANGE) {
 248              		.loc 9 43 4 is_stmt 1 view .LVU46
  43:BassDrum.cpp  **** 			if (freqToSet > MIN_FREQ + FREQ_RANGE) {
 249              		.loc 9 43 31 is_stmt 0 view .LVU47
 250 004e B3EE0E8A 		vmov.f32	s16, #3.0e+1
  43:BassDrum.cpp  **** 			if (freqToSet > MIN_FREQ + FREQ_RANGE) {
 251              		.loc 9 43 49 view .LVU48
 252 0052 0021     		movs	r1, #0
 253 0054 2248     		ldr	r0, .L28+8
 254 0056 FFF7FEFF 		bl	_ZNK5daisy9AdcHandle8GetFloatEh
 255              	.LVL11:
  43:BassDrum.cpp  **** 			if (freqToSet > MIN_FREQ + FREQ_RANGE) {
 256              		.loc 9 43 79 view .LVU49
 257 005a 0321     		movs	r1, #3
  43:BassDrum.cpp  **** 			if (freqToSet > MIN_FREQ + FREQ_RANGE) {
 258              		.loc 9 43 31 view .LVU50
 259 005c A0EE088A 		vfma.f32	s16, s0, s16
  43:BassDrum.cpp  **** 			if (freqToSet > MIN_FREQ + FREQ_RANGE) {
 260              		.loc 9 43 79 view .LVU51
 261 0060 1F48     		ldr	r0, .L28+8
 262 0062 FFF7FEFF 		bl	_ZNK5daisy9AdcHandle8GetFloatEh
 263              	.LVL12:
  43:BassDrum.cpp  **** 			if (freqToSet > MIN_FREQ + FREQ_RANGE) {
 264              		.loc 9 43 95 view .LVU52
 265 0066 9FED1F7A 		vldr.32	s14, .L28+12
  44:BassDrum.cpp  **** 				freqToSet = MIN_FREQ + FREQ_RANGE;
 266              		.loc 9 44 4 view .LVU53
 267 006a DFED1F7A 		vldr.32	s15, .L28+16
  48:BassDrum.cpp  **** 			if (decayToSet > 1) {
 268              		.loc 9 48 38 view .LVU54
 269 006e 0121     		movs	r1, #1
 270 0070 1B48     		ldr	r0, .L28+8
  43:BassDrum.cpp  **** 			if (freqToSet > MIN_FREQ + FREQ_RANGE) {
 271              		.loc 9 43 95 view .LVU55
 272 0072 A0EE078A 		vfma.f32	s16, s0, s14
 273              	.LVL13:
  44:BassDrum.cpp  **** 				freqToSet = MIN_FREQ + FREQ_RANGE;
 274              		.loc 9 44 4 is_stmt 1 view .LVU56
  45:BassDrum.cpp  **** 			}
 275              		.loc 9 45 15 is_stmt 0 view .LVU57
 276 0076 B4EE678A 		vcmp.f32	s16, s15
 277 007a F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 278 007e 37FE888A 		vselgt.f32	s16, s15, s16
 279              	.LVL14:
ARM GAS  C:\Users\kgpol\AppData\Local\Temp\ccDNfb9N.s 			page 16


  48:BassDrum.cpp  **** 			if (decayToSet > 1) {
 280              		.loc 9 48 4 is_stmt 1 view .LVU58
  48:BassDrum.cpp  **** 			if (decayToSet > 1) {
 281              		.loc 9 48 38 is_stmt 0 view .LVU59
 282 0082 FFF7FEFF 		bl	_ZNK5daisy9AdcHandle8GetFloatEh
 283              	.LVL15:
  48:BassDrum.cpp  **** 			if (decayToSet > 1) {
 284              		.loc 9 48 59 view .LVU60
 285 0086 0421     		movs	r1, #4
 286 0088 1548     		ldr	r0, .L28+8
  48:BassDrum.cpp  **** 			if (decayToSet > 1) {
 287              		.loc 9 48 38 view .LVU61
 288 008a F0EE408A 		vmov.f32	s17, s0
  48:BassDrum.cpp  **** 			if (decayToSet > 1) {
 289              		.loc 9 48 59 view .LVU62
 290 008e FFF7FEFF 		bl	_ZNK5daisy9AdcHandle8GetFloatEh
 291              	.LVL16:
 292 0092 B0EE407A 		vmov.f32	s14, s0
  53:BassDrum.cpp  **** 			bd.SetDecay(decayToSet);
 293              		.loc 9 53 14 view .LVU63
 294 0096 1148     		ldr	r0, .L28+4
  49:BassDrum.cpp  **** 				decayToSet = 1.f;
 295              		.loc 9 49 4 view .LVU64
 296 0098 F7EE007A 		vmov.f32	s15, #1.0e+0
  53:BassDrum.cpp  **** 			bd.SetDecay(decayToSet);
 297              		.loc 9 53 14 view .LVU65
 298 009c B0EE480A 		vmov.f32	s0, s16
  48:BassDrum.cpp  **** 			if (decayToSet > 1) {
 299              		.loc 9 48 61 view .LVU66
 300 00a0 78EE878A 		vadd.f32	s17, s17, s14
 301              	.LVL17:
  49:BassDrum.cpp  **** 				decayToSet = 1.f;
 302              		.loc 9 49 4 is_stmt 1 view .LVU67
  50:BassDrum.cpp  **** 			}
 303              		.loc 9 50 16 is_stmt 0 view .LVU68
 304 00a4 F4EE678A 		vcmp.f32	s17, s15
 305 00a8 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 306 00ac 77FEA88A 		vselgt.f32	s17, s15, s17
 307              	.LVL18:
  53:BassDrum.cpp  **** 			bd.SetDecay(decayToSet);
 308              		.loc 9 53 4 is_stmt 1 view .LVU69
  53:BassDrum.cpp  **** 			bd.SetDecay(decayToSet);
 309              		.loc 9 53 14 is_stmt 0 view .LVU70
 310 00b0 FFF7FEFF 		bl	_ZN7daisysp14AnalogBassDrum7SetFreqEf
 311              	.LVL19:
  54:BassDrum.cpp  **** 			bd.SetTone(hw.adc.GetFloat(2));
 312              		.loc 9 54 4 is_stmt 1 view .LVU71
  54:BassDrum.cpp  **** 			bd.SetTone(hw.adc.GetFloat(2));
 313              		.loc 9 54 15 is_stmt 0 view .LVU72
 314 00b4 B0EE680A 		vmov.f32	s0, s17
 315 00b8 0848     		ldr	r0, .L28+4
 316 00ba FFF7FEFF 		bl	_ZN7daisysp14AnalogBassDrum8SetDecayEf
 317              	.LVL20:
  55:BassDrum.cpp  **** 		}
 318              		.loc 9 55 4 is_stmt 1 view .LVU73
  55:BassDrum.cpp  **** 		}
 319              		.loc 9 55 14 is_stmt 0 view .LVU74
ARM GAS  C:\Users\kgpol\AppData\Local\Temp\ccDNfb9N.s 			page 17


 320 00be 0221     		movs	r1, #2
 321 00c0 0748     		ldr	r0, .L28+8
 322 00c2 FFF7FEFF 		bl	_ZNK5daisy9AdcHandle8GetFloatEh
 323              	.LVL21:
 324 00c6 0548     		ldr	r0, .L28+4
 325 00c8 FFF7FEFF 		bl	_ZN7daisysp14AnalogBassDrum7SetToneEf
 326              	.LVL22:
 327              	.LBE110:
 328 00cc A4E7     		b	.L7
 329              	.LVL23:
 330              	.L27:
  55:BassDrum.cpp  **** 		}
 331              		.loc 9 55 14 view .LVU75
 332              	.LBE109:
 333              	.LBE113:
 334              	.LBE115:
  59:BassDrum.cpp  ****     }
  60:BassDrum.cpp  **** }
 335              		.loc 9 60 1 view .LVU76
 336 00ce BDEC028B 		vldm	sp!, {d8}
 337              		.cfi_restore 80
 338              		.cfi_restore 81
 339              		.cfi_def_cfa_offset 32
 340 00d2 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 341              	.LVL24:
 342              	.L24:
 343              		.cfi_def_cfa_offset 0
 344              		.cfi_restore 3
 345              		.cfi_restore 4
 346              		.cfi_restore 5
 347              		.cfi_restore 6
 348              		.cfi_restore 7
 349              		.cfi_restore 8
 350              		.cfi_restore 9
 351              		.cfi_restore 14
 352              		.loc 9 60 1 view .LVU77
 353 00d6 7047     		bx	lr
 354              	.L29:
 355              		.align	2
 356              	.L28:
 357 00d8 00000000 		.word	.LANCHOR0
 358 00dc 00000000 		.word	.LANCHOR2
 359 00e0 18000000 		.word	.LANCHOR1+24
 360 00e4 00004842 		.word	1112014848
 361 00e8 0000A042 		.word	1117782016
 362              		.cfi_endproc
 363              	.LFE4681:
 365              		.section	.text.startup.main,"ax",%progbits
 366              		.align	1
 367              		.p2align 2,,3
 368              		.global	main
 369              		.syntax unified
 370              		.thumb
 371              		.thumb_func
 372              		.fpu fpv5-d16
 374              	main:
 375              	.LFB4682:
ARM GAS  C:\Users\kgpol\AppData\Local\Temp\ccDNfb9N.s 			page 18


  61:BassDrum.cpp  **** 
  62:BassDrum.cpp  **** // ------------------------------------------------------------------------------
  63:BassDrum.cpp  **** //
  64:BassDrum.cpp  **** // ------------------------------------------------------------------------------
  65:BassDrum.cpp  **** 
  66:BassDrum.cpp  **** int main(void)
  67:BassDrum.cpp  **** {
 376              		.loc 9 67 1 is_stmt 1 view -0
 377              		.cfi_startproc
 378              		@ args = 0, pretend = 0, frame = 120
 379              		@ frame_needed = 0, uses_anonymous_args = 0
  68:BassDrum.cpp  **** 	// Initialize the hardware
  69:BassDrum.cpp  ****     hw.Configure();
 380              		.loc 9 69 5 view .LVU79
  67:BassDrum.cpp  **** 	// Initialize the hardware
 381              		.loc 9 67 1 is_stmt 0 view .LVU80
 382 0000 00B5     		push	{lr}
 383              		.cfi_def_cfa_offset 4
 384              		.cfi_offset 14, -4
 385              		.loc 9 69 17 view .LVU81
 386 0002 3A48     		ldr	r0, .L33
  67:BassDrum.cpp  **** 	// Initialize the hardware
 387              		.loc 9 67 1 view .LVU82
 388 0004 2DED028B 		vpush.64	{d8}
 389              		.cfi_def_cfa_offset 12
 390              		.cfi_offset 80, -12
 391              		.cfi_offset 81, -8
 392 0008 9FB0     		sub	sp, sp, #124
 393              		.cfi_def_cfa_offset 136
 394              		.loc 9 69 17 view .LVU83
 395 000a FFF7FEFF 		bl	_ZN5daisy9DaisySeed9ConfigureEv
 396              	.LVL25:
  70:BassDrum.cpp  ****     hw.Init();
 397              		.loc 9 70 5 is_stmt 1 view .LVU84
 398              		.loc 9 70 12 is_stmt 0 view .LVU85
 399 000e 0021     		movs	r1, #0
 400 0010 3648     		ldr	r0, .L33
 401 0012 FFF7FEFF 		bl	_ZN5daisy9DaisySeed4InitEb
 402              	.LVL26:
  71:BassDrum.cpp  ****     hw.SetAudioBlockSize(4);
 403              		.loc 9 71 5 is_stmt 1 view .LVU86
 404              		.loc 9 71 25 is_stmt 0 view .LVU87
 405 0016 0421     		movs	r1, #4
 406 0018 3448     		ldr	r0, .L33
 407 001a FFF7FEFF 		bl	_ZN5daisy9DaisySeed17SetAudioBlockSizeEj
 408              	.LVL27:
  72:BassDrum.cpp  ****     float sample_rate = hw.AudioSampleRate();
 409              		.loc 9 72 5 is_stmt 1 view .LVU88
 410              		.loc 9 72 43 is_stmt 0 view .LVU89
 411 001e 3348     		ldr	r0, .L33
 412 0020 FFF7FEFF 		bl	_ZN5daisy9DaisySeed15AudioSampleRateEv
 413              	.LVL28:
  73:BassDrum.cpp  **** 
  74:BassDrum.cpp  **** 	// Initialize the AnalogBassDrum object
  75:BassDrum.cpp  ****     bd.Init(sample_rate);
 414              		.loc 9 75 12 view .LVU90
 415 0024 3248     		ldr	r0, .L33+4
ARM GAS  C:\Users\kgpol\AppData\Local\Temp\ccDNfb9N.s 			page 19


  72:BassDrum.cpp  ****     float sample_rate = hw.AudioSampleRate();
 416              		.loc 9 72 43 view .LVU91
 417 0026 B0EE408A 		vmov.f32	s16, s0
 418              	.LVL29:
 419              		.loc 9 75 5 is_stmt 1 view .LVU92
 420              		.loc 9 75 12 is_stmt 0 view .LVU93
 421 002a FFF7FEFF 		bl	_ZN7daisysp14AnalogBassDrum4InitEf
 422              	.LVL30:
  76:BassDrum.cpp  **** 	bd.SetAttackFmAmount(.1f);
 423              		.loc 9 76 2 is_stmt 1 view .LVU94
 424              		.loc 9 76 22 is_stmt 0 view .LVU95
 425 002e 9FED310A 		vldr.32	s0, .L33+8
 426 0032 2F48     		ldr	r0, .L33+4
 427 0034 FFF7FEFF 		bl	_ZN7daisysp14AnalogBassDrum17SetAttackFmAmountEf
 428              	.LVL31:
  77:BassDrum.cpp  ****     bd.SetSelfFmAmount(.8f);
 429              		.loc 9 77 5 is_stmt 1 view .LVU96
 430              		.loc 9 77 23 is_stmt 0 view .LVU97
 431 0038 9FED2F0A 		vldr.32	s0, .L33+12
 432 003c 2C48     		ldr	r0, .L33+4
 433 003e FFF7FEFF 		bl	_ZN7daisysp14AnalogBassDrum15SetSelfFmAmountEf
 434              	.LVL32:
  78:BassDrum.cpp  **** 
  79:BassDrum.cpp  **** 	// Initialize the trigger switch
  80:BassDrum.cpp  ****     sw_1.Init(hw.GetPin(TRIG_PIN), sample_rate / 48.f);
 435              		.loc 9 80 5 is_stmt 1 view .LVU98
 436              		.loc 9 80 14 is_stmt 0 view .LVU99
 437 0042 0F20     		movs	r0, #15
 438 0044 FFF7FEFF 		bl	_ZN5daisy9DaisySeed6GetPinEh
 439              	.LVL33:
 440 0048 0346     		mov	r3, r0	@ movhi
 441 004a 9FED2C0A 		vldr.32	s0, .L33+16
 442 004e ADF80430 		strh	r3, [sp, #4]	@ movhi
 443 0052 88EE000A 		vdiv.f32	s0, s16, s0
 444 0056 0199     		ldr	r1, [sp, #4]
 445 0058 2948     		ldr	r0, .L33+20
 446 005a FFF7FEFF 		bl	_ZN5daisy6Switch4InitE12dsy_gpio_pinf
 447              	.LVL34:
  81:BassDrum.cpp  **** 
  82:BassDrum.cpp  **** 	// Create an array to hold all ADC configs
  83:BassDrum.cpp  **** 	AdcChannelConfig adcConfig[NUM_ADC_CHANNELS];
 448              		.loc 9 83 2 is_stmt 1 view .LVU100
  84:BassDrum.cpp  **** 
  85:BassDrum.cpp  **** 	// Initialize the individual ADC pins
  86:BassDrum.cpp  **** 	adcConfig[0].InitSingle(hw.GetPin(FREQ_PIN));
 449              		.loc 9 86 2 view .LVU101
 450              		.loc 9 86 25 is_stmt 0 view .LVU102
 451 005e 1320     		movs	r0, #19
 452 0060 FFF7FEFF 		bl	_ZN5daisy9DaisySeed6GetPinEh
 453              	.LVL35:
 454 0064 0346     		mov	r3, r0	@ movhi
 455 0066 0222     		movs	r2, #2
 456 0068 07A8     		add	r0, sp, #28
 457 006a ADF80830 		strh	r3, [sp, #8]	@ movhi
 458 006e 0299     		ldr	r1, [sp, #8]
 459 0070 FFF7FEFF 		bl	_ZN5daisy16AdcChannelConfig10InitSingleE12dsy_gpio_pinNS0_15ConversionSpeedE
 460              	.LVL36:
ARM GAS  C:\Users\kgpol\AppData\Local\Temp\ccDNfb9N.s 			page 20


  87:BassDrum.cpp  **** 	adcConfig[1].InitSingle(hw.GetPin(DECAY_PIN));
 461              		.loc 9 87 2 is_stmt 1 view .LVU103
 462              		.loc 9 87 25 is_stmt 0 view .LVU104
 463 0074 1420     		movs	r0, #20
 464 0076 FFF7FEFF 		bl	_ZN5daisy9DaisySeed6GetPinEh
 465              	.LVL37:
 466 007a 0346     		mov	r3, r0	@ movhi
 467 007c 0222     		movs	r2, #2
 468 007e 0DF12E00 		add	r0, sp, #46
 469 0082 ADF80C30 		strh	r3, [sp, #12]	@ movhi
 470 0086 0399     		ldr	r1, [sp, #12]
 471 0088 FFF7FEFF 		bl	_ZN5daisy16AdcChannelConfig10InitSingleE12dsy_gpio_pinNS0_15ConversionSpeedE
 472              	.LVL38:
  88:BassDrum.cpp  **** 	adcConfig[2].InitSingle(hw.GetPin(TONE_PIN));
 473              		.loc 9 88 2 is_stmt 1 view .LVU105
 474              		.loc 9 88 25 is_stmt 0 view .LVU106
 475 008c 1520     		movs	r0, #21
 476 008e FFF7FEFF 		bl	_ZN5daisy9DaisySeed6GetPinEh
 477              	.LVL39:
 478 0092 0346     		mov	r3, r0	@ movhi
 479 0094 0222     		movs	r2, #2
 480 0096 10A8     		add	r0, sp, #64
 481 0098 ADF81030 		strh	r3, [sp, #16]	@ movhi
 482 009c 0499     		ldr	r1, [sp, #16]
 483 009e FFF7FEFF 		bl	_ZN5daisy16AdcChannelConfig10InitSingleE12dsy_gpio_pinNS0_15ConversionSpeedE
 484              	.LVL40:
  89:BassDrum.cpp  **** 	adcConfig[3].InitSingle(hw.GetPin(FREQ_CV_PIN));
 485              		.loc 9 89 2 is_stmt 1 view .LVU107
 486              		.loc 9 89 25 is_stmt 0 view .LVU108
 487 00a2 1020     		movs	r0, #16
 488 00a4 FFF7FEFF 		bl	_ZN5daisy9DaisySeed6GetPinEh
 489              	.LVL41:
 490 00a8 0346     		mov	r3, r0	@ movhi
 491 00aa 0222     		movs	r2, #2
 492 00ac 0DF15200 		add	r0, sp, #82
 493 00b0 ADF81430 		strh	r3, [sp, #20]	@ movhi
 494 00b4 0599     		ldr	r1, [sp, #20]
 495 00b6 FFF7FEFF 		bl	_ZN5daisy16AdcChannelConfig10InitSingleE12dsy_gpio_pinNS0_15ConversionSpeedE
 496              	.LVL42:
  90:BassDrum.cpp  **** 	adcConfig[4].InitSingle(hw.GetPin(DECAY_CV_PIN));
 497              		.loc 9 90 2 is_stmt 1 view .LVU109
 498              		.loc 9 90 25 is_stmt 0 view .LVU110
 499 00ba 1120     		movs	r0, #17
 500 00bc FFF7FEFF 		bl	_ZN5daisy9DaisySeed6GetPinEh
 501              	.LVL43:
 502 00c0 0346     		mov	r3, r0	@ movhi
 503 00c2 0222     		movs	r2, #2
 504 00c4 19A8     		add	r0, sp, #100
 505 00c6 ADF81830 		strh	r3, [sp, #24]	@ movhi
 506 00ca 0699     		ldr	r1, [sp, #24]
 507 00cc FFF7FEFF 		bl	_ZN5daisy16AdcChannelConfig10InitSingleE12dsy_gpio_pinNS0_15ConversionSpeedE
 508              	.LVL44:
  91:BassDrum.cpp  **** 
  92:BassDrum.cpp  **** 	// Initialize the hardware ADC
  93:BassDrum.cpp  **** 	hw.adc.Init(adcConfig, NUM_ADC_CHANNELS);
 509              		.loc 9 93 2 is_stmt 1 view .LVU111
 510              		.loc 9 93 13 is_stmt 0 view .LVU112
ARM GAS  C:\Users\kgpol\AppData\Local\Temp\ccDNfb9N.s 			page 21


 511 00d0 07A9     		add	r1, sp, #28
 512 00d2 0423     		movs	r3, #4
 513 00d4 0522     		movs	r2, #5
 514 00d6 0B48     		ldr	r0, .L33+24
 515 00d8 FFF7FEFF 		bl	_ZN5daisy9AdcHandle4InitEPNS_16AdcChannelConfigEjNS0_12OverSamplingE
 516              	.LVL45:
  94:BassDrum.cpp  **** 	hw.adc.Start();
 517              		.loc 9 94 2 is_stmt 1 view .LVU113
 518              		.loc 9 94 14 is_stmt 0 view .LVU114
 519 00dc 0948     		ldr	r0, .L33+24
 520 00de FFF7FEFF 		bl	_ZN5daisy9AdcHandle5StartEv
 521              	.LVL46:
  95:BassDrum.cpp  **** 
  96:BassDrum.cpp  ****     hw.StartAudio(AudioCallback);
 522              		.loc 9 96 5 is_stmt 1 view .LVU115
 523              		.loc 9 96 18 is_stmt 0 view .LVU116
 524 00e2 0949     		ldr	r1, .L33+28
 525 00e4 0148     		ldr	r0, .L33
 526 00e6 FFF7FEFF 		bl	_ZN5daisy9DaisySeed10StartAudioEPFvPKPKfPPfjE
 527              	.LVL47:
 528              	.L31:
  97:BassDrum.cpp  ****     while(1) {}
 529              		.loc 9 97 5 is_stmt 1 discriminator 1 view .LVU117
 530              		.loc 9 97 5 discriminator 1 view .LVU118
 531              		.loc 9 97 5 discriminator 1 view .LVU119
 532              		.loc 9 97 5 discriminator 1 view .LVU120
 533 00ea FEE7     		b	.L31
 534              	.L34:
 535              		.align	2
 536              	.L33:
 537 00ec 00000000 		.word	.LANCHOR1
 538 00f0 00000000 		.word	.LANCHOR2
 539 00f4 CDCCCC3D 		.word	1036831949
 540 00f8 CDCC4C3F 		.word	1061997773
 541 00fc 00004042 		.word	1111490560
 542 0100 00000000 		.word	.LANCHOR0
 543 0104 18000000 		.word	.LANCHOR1+24
 544 0108 00000000 		.word	_Z13AudioCallbackPKPKfPPfj
 545              		.cfi_endproc
 546              	.LFE4682:
 548              		.section	.text.startup._GLOBAL__sub_I_hw,"ax",%progbits
 549              		.align	1
 550              		.p2align 2,,3
 551              		.syntax unified
 552              		.thumb
 553              		.thumb_func
 554              		.fpu fpv5-d16
 556              	_GLOBAL__sub_I_hw:
 557              	.LFB5245:
  98:BassDrum.cpp  **** }...
 558              		.loc 9 98 1 view -0
 559              		.cfi_startproc
 560              		@ args = 0, pretend = 0, frame = 0
 561              		@ frame_needed = 0, uses_anonymous_args = 0
 562              	.LBB143:
 563              	.LBI143:
 564              		.loc 9 98 1 view .LVU122
ARM GAS  C:\Users\kgpol\AppData\Local\Temp\ccDNfb9N.s 			page 22


 565              	.LVL48:
 566              	.LBB144:
 567              	.LBB145:
 568              	.LBI145:
  21:../../libDaisy//src/daisy_seed.h ****     ~DaisySeed() {}
 569              		.loc 2 21 5 view .LVU123
 570              	.LBB146:
 571              	.LBB147:
 572              	.LBI147:
 573              		.file 10 "../../libDaisy//src/per/qspi.h"
   1:../../libDaisy//src/per/qspi.h **** #ifndef DSY_QSPI
   2:../../libDaisy//src/per/qspi.h **** #define DSY_QSPI /**< Macro */
   3:../../libDaisy//src/per/qspi.h **** 
   4:../../libDaisy//src/per/qspi.h **** #ifndef UNIT_TEST // for unit tests, a dummy implementation
   5:../../libDaisy//src/per/qspi.h **** 
   6:../../libDaisy//src/per/qspi.h **** #include <cstdint>
   7:../../libDaisy//src/per/qspi.h **** #include "daisy_core.h" // Added for dsy_gpio_pin typedef
   8:../../libDaisy//src/per/qspi.h **** 
   9:../../libDaisy//src/per/qspi.h **** #define DSY_QSPI_TEXT       \
  10:../../libDaisy//src/per/qspi.h ****     __attribute__((section( \
  11:../../libDaisy//src/per/qspi.h ****         ".qspiflash_text"))) /**< used for reading memory in memory_mapped mode. */
  12:../../libDaisy//src/per/qspi.h **** #define DSY_QSPI_DATA       \
  13:../../libDaisy//src/per/qspi.h ****     __attribute__((section( \
  14:../../libDaisy//src/per/qspi.h ****         ".qspiflash_data"))) /**< used for reading memory in memory_mapped mode. */
  15:../../libDaisy//src/per/qspi.h **** #define DSY_QSPI_BSS        \
  16:../../libDaisy//src/per/qspi.h ****     __attribute__((section( \
  17:../../libDaisy//src/per/qspi.h ****         ".qspiflash_bss"))) /**< used for reading memory in memory_mapped mode. */
  18:../../libDaisy//src/per/qspi.h **** 
  19:../../libDaisy//src/per/qspi.h **** namespace daisy
  20:../../libDaisy//src/per/qspi.h **** {
  21:../../libDaisy//src/per/qspi.h **** /** @addtogroup serial
  22:../../libDaisy//src/per/qspi.h **** @{
  23:../../libDaisy//src/per/qspi.h **** */
  24:../../libDaisy//src/per/qspi.h **** 
  25:../../libDaisy//src/per/qspi.h **** /** 
  26:../../libDaisy//src/per/qspi.h ****  Driver for QSPI peripheral to interface with external flash memory. \n 
  27:../../libDaisy//src/per/qspi.h ****     Currently supported QSPI Devices: \n 
  28:../../libDaisy//src/per/qspi.h ****     * IS25LP080D
  29:../../libDaisy//src/per/qspi.h **** */
  30:../../libDaisy//src/per/qspi.h **** class QSPIHandle
  31:../../libDaisy//src/per/qspi.h **** {
  32:../../libDaisy//src/per/qspi.h ****   public:
  33:../../libDaisy//src/per/qspi.h ****     enum Result
  34:../../libDaisy//src/per/qspi.h ****     {
  35:../../libDaisy//src/per/qspi.h ****         OK = 0,
  36:../../libDaisy//src/per/qspi.h ****         ERR
  37:../../libDaisy//src/per/qspi.h ****     };
  38:../../libDaisy//src/per/qspi.h **** 
  39:../../libDaisy//src/per/qspi.h ****     /** Indicates the current status of the module. 
  40:../../libDaisy//src/per/qspi.h ****          *  Warnings are indicated by a leading W.
  41:../../libDaisy//src/per/qspi.h ****          *  Errors are indicated by a leading E and cause an immediate exit.
  42:../../libDaisy//src/per/qspi.h ****          * 
  43:../../libDaisy//src/per/qspi.h ****          *  \param GOOD - No errors have been reported.
  44:../../libDaisy//src/per/qspi.h ****          *  \param E_HAL_ERROR - HAL code did not return HAL_OK.
  45:../../libDaisy//src/per/qspi.h ****          *  \param E_SWITCHING_MODES - An error was encountered while switching QSPI peripheral mod
  46:../../libDaisy//src/per/qspi.h ****          *  \param E_INVALID_MODE - QSPI should not be written to while the program is executing fr
  47:../../libDaisy//src/per/qspi.h ****          */
ARM GAS  C:\Users\kgpol\AppData\Local\Temp\ccDNfb9N.s 			page 23


  48:../../libDaisy//src/per/qspi.h ****     enum Status
  49:../../libDaisy//src/per/qspi.h ****     {
  50:../../libDaisy//src/per/qspi.h ****         GOOD = 0,
  51:../../libDaisy//src/per/qspi.h ****         E_HAL_ERROR,
  52:../../libDaisy//src/per/qspi.h ****         E_SWITCHING_MODES,
  53:../../libDaisy//src/per/qspi.h ****         E_INVALID_MODE,
  54:../../libDaisy//src/per/qspi.h ****     };
  55:../../libDaisy//src/per/qspi.h **** 
  56:../../libDaisy//src/per/qspi.h ****     /** Configuration structure for interfacing with QSPI Driver */
  57:../../libDaisy//src/per/qspi.h ****     struct Config
  58:../../libDaisy//src/per/qspi.h ****     {
  59:../../libDaisy//src/per/qspi.h ****         /** Flash Devices supported. (Both of these are more-or-less the same, just different sizes
  60:../../libDaisy//src/per/qspi.h ****         enum Device
  61:../../libDaisy//src/per/qspi.h ****         {
  62:../../libDaisy//src/per/qspi.h ****             IS25LP080D,  /**< & */
  63:../../libDaisy//src/per/qspi.h ****             IS25LP064A,  /**< & */
  64:../../libDaisy//src/per/qspi.h ****             DEVICE_LAST, /**< & */
  65:../../libDaisy//src/per/qspi.h ****         };
  66:../../libDaisy//src/per/qspi.h **** 
  67:../../libDaisy//src/per/qspi.h ****         /** 
  68:../../libDaisy//src/per/qspi.h ****         Modes of operation.
  69:../../libDaisy//src/per/qspi.h ****         Memory Mapped mode: QSPI configured so that the QSPI can be
  70:../../libDaisy//src/per/qspi.h ****         read from starting address 0x90000000. Writing is not
  71:../../libDaisy//src/per/qspi.h ****         possible in this mode. \n 
  72:../../libDaisy//src/per/qspi.h ****         Indirect Polling mode: Device driver enabled. 
  73:../../libDaisy//src/per/qspi.h ****         */
  74:../../libDaisy//src/per/qspi.h ****         enum Mode
  75:../../libDaisy//src/per/qspi.h ****         {
  76:../../libDaisy//src/per/qspi.h ****             MEMORY_MAPPED,    /**< & */
  77:../../libDaisy//src/per/qspi.h ****             INDIRECT_POLLING, /**< & */
  78:../../libDaisy//src/per/qspi.h ****             MODE_LAST,
  79:../../libDaisy//src/per/qspi.h ****         };
  80:../../libDaisy//src/per/qspi.h **** 
  81:../../libDaisy//src/per/qspi.h ****         //SCK,  CE# (active low)
  82:../../libDaisy//src/per/qspi.h ****         struct
  83:../../libDaisy//src/per/qspi.h ****         {
  84:../../libDaisy//src/per/qspi.h ****             dsy_gpio_pin io0; /**< & */
  85:../../libDaisy//src/per/qspi.h ****             dsy_gpio_pin io1; /**< & */
  86:../../libDaisy//src/per/qspi.h ****             dsy_gpio_pin io2; /**< & */
  87:../../libDaisy//src/per/qspi.h ****             dsy_gpio_pin io3; /**< & */
  88:../../libDaisy//src/per/qspi.h ****             dsy_gpio_pin clk; /**< & */
  89:../../libDaisy//src/per/qspi.h ****             dsy_gpio_pin ncs; /**< & */
  90:../../libDaisy//src/per/qspi.h ****         } pin_config;
  91:../../libDaisy//src/per/qspi.h **** 
  92:../../libDaisy//src/per/qspi.h ****         Device device;
  93:../../libDaisy//src/per/qspi.h ****         Mode   mode;
  94:../../libDaisy//src/per/qspi.h ****     };
  95:../../libDaisy//src/per/qspi.h **** 
  96:../../libDaisy//src/per/qspi.h ****     /** 
  97:../../libDaisy//src/per/qspi.h ****         Initializes QSPI peripheral, and Resets, and prepares memory for access.
  98:../../libDaisy//src/per/qspi.h ****         \param config should be populated with the mode, device and pin_config before calling this 
  99:../../libDaisy//src/per/qspi.h ****         \return Result::OK or Result::ERR
 100:../../libDaisy//src/per/qspi.h ****         */
 101:../../libDaisy//src/per/qspi.h ****     Result Init(const Config& config);
 102:../../libDaisy//src/per/qspi.h **** 
 103:../../libDaisy//src/per/qspi.h ****     /** Returns the current config. */
 104:../../libDaisy//src/per/qspi.h ****     const Config& GetConfig() const;
ARM GAS  C:\Users\kgpol\AppData\Local\Temp\ccDNfb9N.s 			page 24


 105:../../libDaisy//src/per/qspi.h **** 
 106:../../libDaisy//src/per/qspi.h ****     // Couldn't this just be called before anything else in init? That
 107:../../libDaisy//src/per/qspi.h ****     // would make manually calling it unnecessary.
 108:../../libDaisy//src/per/qspi.h ****     /** 
 109:../../libDaisy//src/per/qspi.h ****         Deinitializes the peripheral
 110:../../libDaisy//src/per/qspi.h ****         This should be called before reinitializing QSPI in a different mode.
 111:../../libDaisy//src/per/qspi.h ****         \return Result::OK or Result::ERR
 112:../../libDaisy//src/per/qspi.h ****         */
 113:../../libDaisy//src/per/qspi.h ****     Result DeInit();
 114:../../libDaisy//src/per/qspi.h **** 
 115:../../libDaisy//src/per/qspi.h ****     /** 
 116:../../libDaisy//src/per/qspi.h ****         Writes a single page to to the specified address on the QSPI chip.
 117:../../libDaisy//src/per/qspi.h ****         For IS25LP*, page size is 256 bytes.
 118:../../libDaisy//src/per/qspi.h ****         \param address Address to write to
 119:../../libDaisy//src/per/qspi.h ****         \param size Buffer size
 120:../../libDaisy//src/per/qspi.h ****         \param buffer Buffer to write
 121:../../libDaisy//src/per/qspi.h ****         \return Result::OK or Result::ERR
 122:../../libDaisy//src/per/qspi.h ****         */
 123:../../libDaisy//src/per/qspi.h ****     Result WritePage(uint32_t address, uint32_t size, uint8_t* buffer);
 124:../../libDaisy//src/per/qspi.h **** 
 125:../../libDaisy//src/per/qspi.h ****     /** 
 126:../../libDaisy//src/per/qspi.h ****         Writes data in buffer to to the QSPI. Starting at address to address+size 
 127:../../libDaisy//src/per/qspi.h ****         \param address Address to write to
 128:../../libDaisy//src/per/qspi.h ****         \param size Buffer size
 129:../../libDaisy//src/per/qspi.h ****         \param buffer Buffer to write
 130:../../libDaisy//src/per/qspi.h ****         \return Result::OK or Result::ERR
 131:../../libDaisy//src/per/qspi.h ****         */
 132:../../libDaisy//src/per/qspi.h ****     Result Write(uint32_t address, uint32_t size, uint8_t* buffer);
 133:../../libDaisy//src/per/qspi.h **** 
 134:../../libDaisy//src/per/qspi.h ****     /** 
 135:../../libDaisy//src/per/qspi.h ****         Erases the area specified on the chip.
 136:../../libDaisy//src/per/qspi.h ****         Erasures will happen by 4K, 32K or 64K increments.
 137:../../libDaisy//src/per/qspi.h ****         Smallest erase possible is 4kB at a time. (on IS25LP*)
 138:../../libDaisy//src/per/qspi.h ****         \param start_addr Address to begin erasing from
 139:../../libDaisy//src/per/qspi.h ****         \param end_addr  Address to stop erasing at
 140:../../libDaisy//src/per/qspi.h ****         \return Result::OK or Result::ERR
 141:../../libDaisy//src/per/qspi.h ****         */
 142:../../libDaisy//src/per/qspi.h ****     Result Erase(uint32_t start_addr, uint32_t end_addr);
 143:../../libDaisy//src/per/qspi.h **** 
 144:../../libDaisy//src/per/qspi.h ****     /**  
 145:../../libDaisy//src/per/qspi.h ****          Erases a single sector of the chip.  
 146:../../libDaisy//src/per/qspi.h ****         TODO: Document the size of this function. 
 147:../../libDaisy//src/per/qspi.h ****         \param address Address of sector to erase
 148:../../libDaisy//src/per/qspi.h ****         \return Result::OK or Result::ERR
 149:../../libDaisy//src/per/qspi.h ****         */
 150:../../libDaisy//src/per/qspi.h ****     Result EraseSector(uint32_t address);
 151:../../libDaisy//src/per/qspi.h **** 
 152:../../libDaisy//src/per/qspi.h ****     /** Returns the current class status. Useful for debugging.
 153:../../libDaisy//src/per/qspi.h ****      *  \returns Status
 154:../../libDaisy//src/per/qspi.h ****      */
 155:../../libDaisy//src/per/qspi.h ****     Status GetStatus();
 156:../../libDaisy//src/per/qspi.h **** 
 157:../../libDaisy//src/per/qspi.h ****     /** Returns a pointer to the actual memory used 
 158:../../libDaisy//src/per/qspi.h ****      *  The memory at this address is read-only
 159:../../libDaisy//src/per/qspi.h ****      *  to write to it use the Write function.
 160:../../libDaisy//src/per/qspi.h ****      * 
 161:../../libDaisy//src/per/qspi.h ****      *  \param offset returns the pointer starting this 
ARM GAS  C:\Users\kgpol\AppData\Local\Temp\ccDNfb9N.s 			page 25


 162:../../libDaisy//src/per/qspi.h ****      *                many bytes into the memory
 163:../../libDaisy//src/per/qspi.h ****     */
 164:../../libDaisy//src/per/qspi.h ****     void* GetData(uint32_t offset = 0);
 165:../../libDaisy//src/per/qspi.h **** 
 166:../../libDaisy//src/per/qspi.h ****     QSPIHandle() : pimpl_(nullptr) {}
 574              		.loc 10 166 5 view .LVU124
 575              	.LBE147:
 576              	.LBE146:
 577              	.LBE145:
 578              	.LBE144:
 579              	.LBE143:
 580              		.loc 9 98 1 is_stmt 0 view .LVU125
 581 0000 08B5     		push	{r3, lr}
 582              		.cfi_def_cfa_offset 8
 583              		.cfi_offset 3, -8
 584              		.cfi_offset 14, -4
 585              	.LBB176:
 586              	.LBB174:
 587              	.LBB168:
 588              	.LBB166:
 589              	.LBB152:
 590              	.LBB148:
 591              	.LBB149:
 592              		.loc 10 166 34 view .LVU126
 593 0002 0B48     		ldr	r0, .L37
 594 0004 0023     		movs	r3, #0
 595              	.LBE149:
 596              	.LBE148:
 597              	.LBE152:
 598              	.LBE166:
 599              	.LBE168:
   8:BassDrum.cpp  **** DaisySeed      hw;
 600              		.loc 9 8 16 view .LVU127
 601 0006 0B4A     		ldr	r2, .L37+4
 602              	.LBB169:
 603              	.LBB167:
 604              	.LBB153:
 605              	.LBB151:
 606              	.LBB150:
 607              		.loc 10 166 34 view .LVU128
 608 0008 0360     		str	r3, [r0]
 609              	.LVL49:
 610              		.loc 10 166 34 view .LVU129
 611              	.LBE150:
 612              	.LBE151:
 613              	.LBE153:
 614              	.LBB154:
 615              	.LBI154:
  95:../../libDaisy//src/hid/audio.h ****     ~AudioHandle() {}
 616              		.loc 6 95 5 is_stmt 1 view .LVU130
 617              	.LBB155:
 618              	.LBB156:
  95:../../libDaisy//src/hid/audio.h ****     ~AudioHandle() {}
 619              		.loc 6 95 35 is_stmt 0 view .LVU131
 620 000a 4361     		str	r3, [r0, #20]
 621              	.LVL50:
  95:../../libDaisy//src/hid/audio.h ****     ~AudioHandle() {}
ARM GAS  C:\Users\kgpol\AppData\Local\Temp\ccDNfb9N.s 			page 26


 622              		.loc 6 95 35 view .LVU132
 623              	.LBE156:
 624              	.LBE155:
 625              	.LBE154:
 626              	.LBB157:
 627              	.LBI157:
 109:../../libDaisy//src/per/adc.h ****     ~AdcHandle() {}
 628              		.loc 5 109 5 is_stmt 1 view .LVU133
 109:../../libDaisy//src/per/adc.h ****     ~AdcHandle() {}
 629              		.loc 5 109 5 is_stmt 0 view .LVU134
 630              	.LBE157:
 631              	.LBB158:
 632              	.LBI158:
 633              		.file 11 "../../libDaisy//src/per/dac.h"
   1:../../libDaisy//src/per/dac.h **** #pragma once
   2:../../libDaisy//src/per/dac.h **** #ifndef DSY_DAC_H
   3:../../libDaisy//src/per/dac.h **** #define DSY_DAC_H
   4:../../libDaisy//src/per/dac.h **** 
   5:../../libDaisy//src/per/dac.h **** #include "daisy_core.h"
   6:../../libDaisy//src/per/dac.h **** 
   7:../../libDaisy//src/per/dac.h **** namespace daisy
   8:../../libDaisy//src/per/dac.h **** {
   9:../../libDaisy//src/per/dac.h **** /** @brief DAC handle for Built-in DAC Peripheral 
  10:../../libDaisy//src/per/dac.h ****  *  @ingroup per_analog
  11:../../libDaisy//src/per/dac.h ****  ** 
  12:../../libDaisy//src/per/dac.h ****  ** For now only Normal Mode is supported,
  13:../../libDaisy//src/per/dac.h ****  ** Sample and hold mode provides reduced power consumption, but requires a bit more setup.
  14:../../libDaisy//src/per/dac.h ****  **
  15:../../libDaisy//src/per/dac.h ****  ** For now connecting the DAC through other internal peripherals is also not supported.
  16:../../libDaisy//src/per/dac.h ****  **
  17:../../libDaisy//src/per/dac.h ****  ** Since the DAC channels have dedicated pins we don't need to pass in a pin config like with
  18:../../libDaisy//src/per/dac.h ****  ** other modules. However, it is still important to not try to use the DAC pins for anything else.
  19:../../libDaisy//src/per/dac.h ****  ** DAC Channel 1 is on PA4, and DAC Channel 2 is on PA5
  20:../../libDaisy//src/per/dac.h ****  ***/
  21:../../libDaisy//src/per/dac.h **** class DacHandle
  22:../../libDaisy//src/per/dac.h **** {
  23:../../libDaisy//src/per/dac.h ****   public:
  24:../../libDaisy//src/per/dac.h ****     /** Return Values for the DacHandle class */
  25:../../libDaisy//src/per/dac.h ****     enum class Result
  26:../../libDaisy//src/per/dac.h ****     {
  27:../../libDaisy//src/per/dac.h ****         OK,
  28:../../libDaisy//src/per/dac.h ****         ERR,
  29:../../libDaisy//src/per/dac.h ****     };
  30:../../libDaisy//src/per/dac.h **** 
  31:../../libDaisy//src/per/dac.h ****     /** Selects which channel(s) will be configured for use. */
  32:../../libDaisy//src/per/dac.h ****     enum class Channel
  33:../../libDaisy//src/per/dac.h ****     {
  34:../../libDaisy//src/per/dac.h ****         ONE,
  35:../../libDaisy//src/per/dac.h ****         TWO,
  36:../../libDaisy//src/per/dac.h ****         BOTH,
  37:../../libDaisy//src/per/dac.h ****     };
  38:../../libDaisy//src/per/dac.h **** 
  39:../../libDaisy//src/per/dac.h ****     /** Sets the Mode for the DAC channels.
  40:../../libDaisy//src/per/dac.h ****      **
  41:../../libDaisy//src/per/dac.h ****      ** Polling mode uses the blocking mode to transmit a single value at a time.
  42:../../libDaisy//src/per/dac.h ****      **
  43:../../libDaisy//src/per/dac.h ****      ** DMA mode uses a buffer, and periodically transmits it triggering a 
ARM GAS  C:\Users\kgpol\AppData\Local\Temp\ccDNfb9N.s 			page 27


  44:../../libDaisy//src/per/dac.h ****      ** callback to fill the buffer when it is ready for more samples.
  45:../../libDaisy//src/per/dac.h ****      ***/
  46:../../libDaisy//src/per/dac.h ****     enum class Mode
  47:../../libDaisy//src/per/dac.h ****     {
  48:../../libDaisy//src/per/dac.h ****         POLLING,
  49:../../libDaisy//src/per/dac.h ****         DMA,
  50:../../libDaisy//src/per/dac.h ****     };
  51:../../libDaisy//src/per/dac.h **** 
  52:../../libDaisy//src/per/dac.h ****     /** Sets the number of bits per sample transmitted out of the DAC.
  53:../../libDaisy//src/per/dac.h ****      ** The output range will be: 0V - VDDA
  54:../../libDaisy//src/per/dac.h ****      ** The resolution will be roughly: bitdepth / (VDDA - 0V) 
  55:../../libDaisy//src/per/dac.h ****      ***/
  56:../../libDaisy//src/per/dac.h ****     enum class BitDepth
  57:../../libDaisy//src/per/dac.h ****     {
  58:../../libDaisy//src/per/dac.h ****         BITS_8,
  59:../../libDaisy//src/per/dac.h ****         BITS_12
  60:../../libDaisy//src/per/dac.h ****     };
  61:../../libDaisy//src/per/dac.h **** 
  62:../../libDaisy//src/per/dac.h ****     /** Sets whether the DAC output is buffered for higher drive ability. */
  63:../../libDaisy//src/per/dac.h ****     enum class BufferState
  64:../../libDaisy//src/per/dac.h ****     {
  65:../../libDaisy//src/per/dac.h ****         ENABLED,
  66:../../libDaisy//src/per/dac.h ****         DISABLED,
  67:../../libDaisy//src/per/dac.h ****     };
  68:../../libDaisy//src/per/dac.h **** 
  69:../../libDaisy//src/per/dac.h ****     /** Configuration structure for initializing the DAC structure. */
  70:../../libDaisy//src/per/dac.h ****     struct Config
  71:../../libDaisy//src/per/dac.h ****     {
  72:../../libDaisy//src/per/dac.h ****         /** Target Samplerate in Hz used to configure the internal 
  73:../../libDaisy//src/per/dac.h ****          ** timebase for DMA mode. Does nothing in POLLING mode.
  74:../../libDaisy//src/per/dac.h ****          ** If the value is 0 at Init time this will default to 48000Hz 
  75:../../libDaisy//src/per/dac.h ****          ** otherwise the driver will attempt meet the target.*/
  76:../../libDaisy//src/per/dac.h ****         uint32_t target_samplerate;
  77:../../libDaisy//src/per/dac.h **** 
  78:../../libDaisy//src/per/dac.h ****         Channel     chn;
  79:../../libDaisy//src/per/dac.h ****         Mode        mode;
  80:../../libDaisy//src/per/dac.h ****         BitDepth    bitdepth;
  81:../../libDaisy//src/per/dac.h ****         BufferState buff_state;
  82:../../libDaisy//src/per/dac.h ****     };
  83:../../libDaisy//src/per/dac.h **** 
  84:../../libDaisy//src/per/dac.h ****     DacHandle() : pimpl_(nullptr) {}
 634              		.loc 11 84 5 is_stmt 1 view .LVU135
 635              	.LBB159:
 636              	.LBB160:
 637              		.loc 11 84 33 is_stmt 0 view .LVU136
 638 000c 0362     		str	r3, [r0, #32]
 639              	.LVL51:
 640              		.loc 11 84 33 view .LVU137
 641              	.LBE160:
 642              	.LBE159:
 643              	.LBE158:
 644              	.LBB161:
 645              	.LBI161:
  40:../../libDaisy//src/hid/usb.h **** 
 646              		.loc 4 40 5 is_stmt 1 view .LVU138
  40:../../libDaisy//src/hid/usb.h **** 
 647              		.loc 4 40 5 is_stmt 0 view .LVU139
ARM GAS  C:\Users\kgpol\AppData\Local\Temp\ccDNfb9N.s 			page 28


 648              	.LBE161:
 649              	.LBB162:
 650              	.LBI162:
  96:../../libDaisy//src/sys/system.h ****     ~System() {}
 651              		.loc 3 96 5 is_stmt 1 view .LVU140
  96:../../libDaisy//src/sys/system.h ****     ~System() {}
 652              		.loc 3 96 5 is_stmt 0 view .LVU141
 653              	.LBE162:
 654              	.LBB163:
 655              	.LBI163:
 656              		.file 12 "../../libDaisy//src/per/sai.h"
   1:../../libDaisy//src/per/sai.h **** #pragma once
   2:../../libDaisy//src/per/sai.h **** #ifndef DSY_SAI_H
   3:../../libDaisy//src/per/sai.h **** #define DSY_SAI_H
   4:../../libDaisy//src/per/sai.h **** 
   5:../../libDaisy//src/per/sai.h **** #include "daisy_core.h"
   6:../../libDaisy//src/per/sai.h **** 
   7:../../libDaisy//src/per/sai.h **** namespace daisy
   8:../../libDaisy//src/per/sai.h **** {
   9:../../libDaisy//src/per/sai.h **** /** 
  10:../../libDaisy//src/per/sai.h ****  * Support for I2S Audio Protocol with different bit-depth, samplerate options
  11:../../libDaisy//src/per/sai.h ****  * Allows for master or slave, as well as freedom of selecting direction, 
  12:../../libDaisy//src/per/sai.h ****  * and other behavior for each peripheral, and block.
  13:../../libDaisy//src/per/sai.h ****  * 
  14:../../libDaisy//src/per/sai.h ****  * DMA Transfer commands must use buffers located within non-cached memory or use cache maintenance
  15:../../libDaisy//src/per/sai.h ****  * To declare an unitialized global element in the DMA memory section:
  16:../../libDaisy//src/per/sai.h ****  *    int32_t DSY_DMA_BUFFER_SECTOR my_buffer[96];
  17:../../libDaisy//src/per/sai.h ****  *
  18:../../libDaisy//src/per/sai.h ****  * Callback functions will be called once per half of the buffer. In the above example, 
  19:../../libDaisy//src/per/sai.h ****  * the callback function would be called once for every 48 samples.
  20:../../libDaisy//src/per/sai.h ****  * 
  21:../../libDaisy//src/per/sai.h ****  * Use SAI Handle like this:
  22:../../libDaisy//src/per/sai.h ****  * 
  23:../../libDaisy//src/per/sai.h ****  *  SaiHandle::Config sai_config;
  24:../../libDaisy//src/per/sai.h ****  *  sai_config.periph          = SaiHandle::Config::Peripheral::SAI_1;
  25:../../libDaisy//src/per/sai.h ****  *  sai_config.sr              = SaiHandle::Config::SampleRate::SAI_48KHZ;
  26:../../libDaisy//src/per/sai.h ****  *  sai_config.bit_depth       = SaiHandle::Config::BitDepth::SAI_24BIT;
  27:../../libDaisy//src/per/sai.h ****  *  sai_config.a_sync          = SaiHandle::Config::Sync::MASTER;
  28:../../libDaisy//src/per/sai.h ****  *  sai_config.b_sync          = SaiHandle::Config::Sync::SLAVE;
  29:../../libDaisy//src/per/sai.h ****  *  sai_config.a_dir           = SaiHandle::Config::Direction::RECEIVE;
  30:../../libDaisy//src/per/sai.h ****  *  sai_config.b_dir           = SaiHandle::Config::Direction::TRANSMIT;
  31:../../libDaisy//src/per/sai.h ****  *  sai_config.pin_config.fs   = {DSY_GPIOE, 4};
  32:../../libDaisy//src/per/sai.h ****  *  sai_config.pin_config.mclk = {DSY_GPIOE, 2};
  33:../../libDaisy//src/per/sai.h ****  *  sai_config.pin_config.sck  = {DSY_GPIOE, 5};
  34:../../libDaisy//src/per/sai.h ****  *  sai_config.pin_config.sa   = {DSY_GPIOE, 6};
  35:../../libDaisy//src/per/sai.h ****  *  sai_config.pin_config.sb   = {DSY_GPIOE, 3};
  36:../../libDaisy//src/per/sai.h ****  *  // Then Initialize
  37:../../libDaisy//src/per/sai.h ****  *  SaiHandle sai;
  38:../../libDaisy//src/per/sai.h ****  *  sai.Init(sai_config);
  39:../../libDaisy//src/per/sai.h ****  *  // Now you can use it:
  40:../../libDaisy//src/per/sai.h ****  *  sai.StartDma(. . .);
  41:../../libDaisy//src/per/sai.h ****  */
  42:../../libDaisy//src/per/sai.h **** class SaiHandle
  43:../../libDaisy//src/per/sai.h **** {
  44:../../libDaisy//src/per/sai.h ****   public:
  45:../../libDaisy//src/per/sai.h ****     /** Contains settings for initialising an SAI Interface */
  46:../../libDaisy//src/per/sai.h ****     struct Config
ARM GAS  C:\Users\kgpol\AppData\Local\Temp\ccDNfb9N.s 			page 29


  47:../../libDaisy//src/per/sai.h ****     {
  48:../../libDaisy//src/per/sai.h ****         /** Specifies the internal peripheral to use (mapped to different hardware pins) */
  49:../../libDaisy//src/per/sai.h ****         enum class Peripheral
  50:../../libDaisy//src/per/sai.h ****         {
  51:../../libDaisy//src/per/sai.h ****             SAI_1,
  52:../../libDaisy//src/per/sai.h ****             SAI_2,
  53:../../libDaisy//src/per/sai.h ****         };
  54:../../libDaisy//src/per/sai.h **** 
  55:../../libDaisy//src/per/sai.h ****         /** Rate at which samples will be streaming to/from the device. */
  56:../../libDaisy//src/per/sai.h ****         enum class SampleRate
  57:../../libDaisy//src/per/sai.h ****         {
  58:../../libDaisy//src/per/sai.h ****             SAI_8KHZ,
  59:../../libDaisy//src/per/sai.h ****             SAI_16KHZ,
  60:../../libDaisy//src/per/sai.h ****             SAI_32KHZ,
  61:../../libDaisy//src/per/sai.h ****             SAI_48KHZ,
  62:../../libDaisy//src/per/sai.h ****             SAI_96KHZ,
  63:../../libDaisy//src/per/sai.h ****         };
  64:../../libDaisy//src/per/sai.h **** 
  65:../../libDaisy//src/per/sai.h ****         /** Bit Depth that the hardware expects to be transferred to/from the device. */
  66:../../libDaisy//src/per/sai.h ****         enum class BitDepth
  67:../../libDaisy//src/per/sai.h ****         {
  68:../../libDaisy//src/per/sai.h ****             SAI_16BIT,
  69:../../libDaisy//src/per/sai.h ****             SAI_24BIT,
  70:../../libDaisy//src/per/sai.h ****             SAI_32BIT,
  71:../../libDaisy//src/per/sai.h ****         };
  72:../../libDaisy//src/per/sai.h **** 
  73:../../libDaisy//src/per/sai.h ****         /** Specifies whether a particular block is the master or the slave 
  74:../../libDaisy//src/per/sai.h ****          ** If both are set to slave, no MCLK signal will be used, and it is
  75:../../libDaisy//src/per/sai.h ****          ** expected that the codec will have its own xtal.
  76:../../libDaisy//src/per/sai.h ****          */
  77:../../libDaisy//src/per/sai.h ****         enum class Sync
  78:../../libDaisy//src/per/sai.h ****         {
  79:../../libDaisy//src/per/sai.h ****             MASTER,
  80:../../libDaisy//src/per/sai.h ****             SLAVE,
  81:../../libDaisy//src/per/sai.h ****         };
  82:../../libDaisy//src/per/sai.h **** 
  83:../../libDaisy//src/per/sai.h ****         /** Specifies the direction for each peripheral block. */
  84:../../libDaisy//src/per/sai.h ****         enum class Direction
  85:../../libDaisy//src/per/sai.h ****         {
  86:../../libDaisy//src/per/sai.h ****             TRANSMIT,
  87:../../libDaisy//src/per/sai.h ****             RECEIVE,
  88:../../libDaisy//src/per/sai.h ****         };
  89:../../libDaisy//src/per/sai.h **** 
  90:../../libDaisy//src/per/sai.h ****         Peripheral periph;
  91:../../libDaisy//src/per/sai.h ****         struct
  92:../../libDaisy//src/per/sai.h ****         {
  93:../../libDaisy//src/per/sai.h ****             dsy_gpio_pin mclk, fs, sck, sa, sb;
  94:../../libDaisy//src/per/sai.h ****         } pin_config;
  95:../../libDaisy//src/per/sai.h ****         SampleRate sr;
  96:../../libDaisy//src/per/sai.h ****         BitDepth   bit_depth;
  97:../../libDaisy//src/per/sai.h ****         Sync       a_sync, b_sync;
  98:../../libDaisy//src/per/sai.h ****         Direction  a_dir, b_dir;
  99:../../libDaisy//src/per/sai.h ****     };
 100:../../libDaisy//src/per/sai.h **** 
 101:../../libDaisy//src/per/sai.h ****     /** Return values for SAI functions */
 102:../../libDaisy//src/per/sai.h ****     enum class Result
 103:../../libDaisy//src/per/sai.h ****     {
ARM GAS  C:\Users\kgpol\AppData\Local\Temp\ccDNfb9N.s 			page 30


 104:../../libDaisy//src/per/sai.h ****         OK,
 105:../../libDaisy//src/per/sai.h ****         ERR,
 106:../../libDaisy//src/per/sai.h ****     };
 107:../../libDaisy//src/per/sai.h **** 
 108:../../libDaisy//src/per/sai.h ****     SaiHandle() : pimpl_(nullptr) {}
 657              		.loc 12 108 5 is_stmt 1 view .LVU142
 658              	.LBB164:
 659              	.LBB165:
 660              		.loc 12 108 33 is_stmt 0 view .LVU143
 661 000e C363     		str	r3, [r0, #60]
 662              	.LVL52:
 663              		.loc 12 108 33 view .LVU144
 664              	.LBE165:
 665              	.LBE164:
 666              	.LBE163:
 667              	.LBE167:
 668              	.LBE169:
   8:BassDrum.cpp  **** DaisySeed      hw;
 669              		.loc 9 8 16 view .LVU145
 670 0010 0949     		ldr	r1, .L37+8
 671 0012 FFF7FEFF 		bl	__aeabi_atexit
 672              	.LVL53:
 673              	.LBB170:
 674              	.LBI170:
  34:../../DaisySP//Source/Drums/analogbassdrum.h ****     ~AnalogBassDrum() {}
 675              		.loc 7 34 5 is_stmt 1 view .LVU146
 676              	.LBB171:
 677              	.LBB172:
 678              	.LBI172:
  29:../../DaisySP//Source/Filters/svf.h ****     ~Svf() {}
 679              		.loc 8 29 5 view .LVU147
  29:../../DaisySP//Source/Filters/svf.h ****     ~Svf() {}
 680              		.loc 8 29 5 is_stmt 0 view .LVU148
 681              	.LBE172:
 682              	.LBE171:
 683              	.LBE170:
   9:BassDrum.cpp  **** AnalogBassDrum bd;
 684              		.loc 9 9 16 view .LVU149
 685 0016 074A     		ldr	r2, .L37+4
 686 0018 0849     		ldr	r1, .L37+12
 687 001a 0948     		ldr	r0, .L37+16
 688 001c FFF7FEFF 		bl	__aeabi_atexit
 689              	.LVL54:
 690              	.LBB173:
 691              	.LBI173:
  41:../../libDaisy//src/hid/switch.h ****     ~Switch() {}
 692              		.loc 1 41 5 is_stmt 1 view .LVU150
  41:../../libDaisy//src/hid/switch.h ****     ~Switch() {}
 693              		.loc 1 41 5 is_stmt 0 view .LVU151
 694              	.LBE173:
  10:BassDrum.cpp  **** Switch         sw_1;
 695              		.loc 9 10 16 view .LVU152
 696 0020 044A     		ldr	r2, .L37+4
 697 0022 0849     		ldr	r1, .L37+20
 698 0024 0848     		ldr	r0, .L37+24
 699              	.LBE174:
 700              	.LBE176:
ARM GAS  C:\Users\kgpol\AppData\Local\Temp\ccDNfb9N.s 			page 31


 701              		.loc 9 98 1 view .LVU153
 702 0026 BDE80840 		pop	{r3, lr}
 703              		.cfi_restore 14
 704              		.cfi_restore 3
 705              		.cfi_def_cfa_offset 0
 706              	.LBB177:
 707              	.LBB175:
  10:BassDrum.cpp  **** Switch         sw_1;
 708              		.loc 9 10 16 view .LVU154
 709 002a FFF7FEBF 		b	__aeabi_atexit
 710              	.LVL55:
 711              	.L38:
 712 002e 00BF     		.align	2
 713              	.L37:
 714 0030 00000000 		.word	.LANCHOR1
 715 0034 00000000 		.word	__dso_handle
 716 0038 00000000 		.word	_ZN5daisy9DaisySeedD1Ev
 717 003c 00000000 		.word	_ZN7daisysp14AnalogBassDrumD1Ev
 718 0040 00000000 		.word	.LANCHOR2
 719 0044 00000000 		.word	_ZN5daisy6SwitchD1Ev
 720 0048 00000000 		.word	.LANCHOR0
 721              	.LBE175:
 722              	.LBE177:
 723              		.cfi_endproc
 724              	.LFE5245:
 726              		.section	.init_array,"aw",%init_array
 727              		.align	2
 728 0000 00000000 		.word	_GLOBAL__sub_I_hw(target1)
 729              		.global	sw_1
 730              		.global	bd
 731              		.global	hw
 732              		.section	.bss.bd,"aw",%nobits
 733              		.align	2
 734              		.set	.LANCHOR2,. + 0
 737              	bd:
 738 0000 00000000 		.space	152
 738      00000000 
 738      00000000 
 738      00000000 
 738      00000000 
 739              		.section	.bss.hw,"aw",%nobits
 740              		.align	2
 741              		.set	.LANCHOR1,. + 0
 744              	hw:
 745 0000 00000000 		.space	64
 745      00000000 
 745      00000000 
 745      00000000 
 745      00000000 
 746              		.section	.bss.sw_1,"aw",%nobits
 747              		.align	2
 748              		.set	.LANCHOR0,. + 0
 751              	sw_1:
 752 0000 00000000 		.space	16
 752      00000000 
 752      00000000 
 752      00000000 
ARM GAS  C:\Users\kgpol\AppData\Local\Temp\ccDNfb9N.s 			page 32


 753              		.text
 754              	.Letext0:
 755              		.file 13 "c:\\program files\\daisytoolchain\\arm-none-eabi\\include\\machine\\_default_types.h"
 756              		.file 14 "c:\\program files\\daisytoolchain\\arm-none-eabi\\include\\sys\\_stdint.h"
 757              		.file 15 "c:\\program files\\daisytoolchain\\arm-none-eabi\\include\\stdint.h"
 758              		.file 16 "c:\\program files\\daisytoolchain\\lib\\gcc\\arm-none-eabi\\10.2.1\\include\\stddef.h"
 759              		.file 17 "c:\\program files\\daisytoolchain\\arm-none-eabi\\include\\c++\\10.2.1\\cmath"
 760              		.file 18 "c:\\program files\\daisytoolchain\\arm-none-eabi\\include\\c++\\10.2.1\\bits\\std_abs.h"
 761              		.file 19 "c:\\program files\\daisytoolchain\\arm-none-eabi\\include\\c++\\10.2.1\\cstdlib"
 762              		.file 20 "c:\\program files\\daisytoolchain\\arm-none-eabi\\include\\c++\\10.2.1\\cstdint"
 763              		.file 21 "c:\\program files\\daisytoolchain\\arm-none-eabi\\include\\c++\\10.2.1\\type_traits"
 764              		.file 22 "c:\\program files\\daisytoolchain\\arm-none-eabi\\include\\c++\\10.2.1\\debug\\debug.h"
 765              		.file 23 "c:\\program files\\daisytoolchain\\arm-none-eabi\\include\\c++\\10.2.1\\arm-none-eabi\\t
 766              		.file 24 "c:\\program files\\daisytoolchain\\arm-none-eabi\\include\\c++\\10.2.1\\bits\\algorithmf
 767              		.file 25 "c:\\program files\\daisytoolchain\\arm-none-eabi\\include\\c++\\10.2.1\\bits\\stl_pair.h
 768              		.file 26 "c:\\program files\\daisytoolchain\\arm-none-eabi\\include\\c++\\10.2.1\\bits\\exception_
 769              		.file 27 "c:\\program files\\daisytoolchain\\arm-none-eabi\\include\\c++\\10.2.1\\cstdarg"
 770              		.file 28 "c:\\program files\\daisytoolchain\\arm-none-eabi\\include\\c++\\10.2.1\\cstdio"
 771              		.file 29 "c:\\program files\\daisytoolchain\\arm-none-eabi\\include\\c++\\10.2.1\\cstring"
 772              		.file 30 "c:\\program files\\daisytoolchain\\arm-none-eabi\\include\\c++\\10.2.1\\cwchar"
 773              		.file 31 "c:\\program files\\daisytoolchain\\arm-none-eabi\\include\\c++\\10.2.1\\clocale"
 774              		.file 32 "c:\\program files\\daisytoolchain\\arm-none-eabi\\include\\c++\\10.2.1\\bits\\basic_stri
 775              		.file 33 "c:\\program files\\daisytoolchain\\arm-none-eabi\\include\\c++\\10.2.1\\bits\\stl_tempbu
 776              		.file 34 "c:\\program files\\daisytoolchain\\arm-none-eabi\\include\\c++\\10.2.1\\bits\\predefined
 777              		.file 35 "c:\\program files\\daisytoolchain\\arm-none-eabi\\include\\sys\\_types.h"
 778              		.file 36 "c:\\program files\\daisytoolchain\\arm-none-eabi\\include\\sys\\reent.h"
 779              		.file 37 "c:\\program files\\daisytoolchain\\arm-none-eabi\\include\\sys\\lock.h"
 780              		.file 38 "c:\\program files\\daisytoolchain\\arm-none-eabi\\include\\math.h"
 781              		.file 39 "c:\\program files\\daisytoolchain\\arm-none-eabi\\include\\stdlib.h"
 782              		.file 40 "c:\\program files\\daisytoolchain\\arm-none-eabi\\include\\c++\\10.2.1\\math.h"
 783              		.file 41 "c:\\program files\\daisytoolchain\\arm-none-eabi\\include\\c++\\10.2.1\\stdlib.h"
 784              		.file 42 "../../libDaisy//src/daisy_core.h"
 785              		.file 43 "../../libDaisy//src/per/tim.h"
 786              		.file 44 "../../libDaisy//src/util/wav_format.h"
 787              		.file 45 "../../libDaisy//src/dev/max11300.h"
 788              		.file 46 "../../libDaisy//src/per/gpio.h"
 789              		.file 47 "../../libDaisy//src/dev/sdram.h"
 790              		.file 48 "c:\\program files\\daisytoolchain\\lib\\gcc\\arm-none-eabi\\10.2.1\\include\\stdarg.h"
 791              		.file 49 "c:\\program files\\daisytoolchain\\arm-none-eabi\\include\\stdio.h"
 792              		.file 50 "c:\\program files\\daisytoolchain\\arm-none-eabi\\include\\string.h"
 793              		.file 51 "../../DaisySP//Source/Control/adenv.h"
 794              		.file 52 "../../DaisySP//Source/Utility/dsp.h"
 795              		.file 53 "c:\\program files\\daisytoolchain\\arm-none-eabi\\include\\wchar.h"
 796              		.file 54 "c:\\program files\\daisytoolchain\\arm-none-eabi\\include\\locale.h"
 797              		.file 55 "../../libDaisy//src/dev/sr_595.h"
 798              		.file 56 "<built-in>"
ARM GAS  C:\Users\kgpol\AppData\Local\Temp\ccDNfb9N.s 			page 33


DEFINED SYMBOLS
                            *ABS*:00000000 BassDrum.cpp
C:\Users\kgpol\AppData\Local\Temp\ccDNfb9N.s:17     .text._ZN5daisy6SwitchD2Ev:00000000 $t
C:\Users\kgpol\AppData\Local\Temp\ccDNfb9N.s:26     .text._ZN5daisy6SwitchD2Ev:00000000 _ZN5daisy6SwitchD2Ev
C:\Users\kgpol\AppData\Local\Temp\ccDNfb9N.s:26     .text._ZN5daisy6SwitchD2Ev:00000000 _ZN5daisy6SwitchD1Ev
C:\Users\kgpol\AppData\Local\Temp\ccDNfb9N.s:43     .text._ZN5daisy9DaisySeedD2Ev:00000000 $t
C:\Users\kgpol\AppData\Local\Temp\ccDNfb9N.s:51     .text._ZN5daisy9DaisySeedD2Ev:00000000 _ZN5daisy9DaisySeedD2Ev
C:\Users\kgpol\AppData\Local\Temp\ccDNfb9N.s:51     .text._ZN5daisy9DaisySeedD2Ev:00000000 _ZN5daisy9DaisySeedD1Ev
C:\Users\kgpol\AppData\Local\Temp\ccDNfb9N.s:92     .text._ZN7daisysp14AnalogBassDrumD2Ev:00000000 $t
C:\Users\kgpol\AppData\Local\Temp\ccDNfb9N.s:100    .text._ZN7daisysp14AnalogBassDrumD2Ev:00000000 _ZN7daisysp14AnalogBassDrumD2Ev
C:\Users\kgpol\AppData\Local\Temp\ccDNfb9N.s:100    .text._ZN7daisysp14AnalogBassDrumD2Ev:00000000 _ZN7daisysp14AnalogBassDrumD1Ev
C:\Users\kgpol\AppData\Local\Temp\ccDNfb9N.s:123    .text._Z13AudioCallbackPKPKfPPfj:00000000 $t
C:\Users\kgpol\AppData\Local\Temp\ccDNfb9N.s:131    .text._Z13AudioCallbackPKPKfPPfj:00000000 _Z13AudioCallbackPKPKfPPfj
C:\Users\kgpol\AppData\Local\Temp\ccDNfb9N.s:357    .text._Z13AudioCallbackPKPKfPPfj:000000d8 $d
C:\Users\kgpol\AppData\Local\Temp\ccDNfb9N.s:366    .text.startup.main:00000000 $t
C:\Users\kgpol\AppData\Local\Temp\ccDNfb9N.s:374    .text.startup.main:00000000 main
C:\Users\kgpol\AppData\Local\Temp\ccDNfb9N.s:537    .text.startup.main:000000ec $d
C:\Users\kgpol\AppData\Local\Temp\ccDNfb9N.s:549    .text.startup._GLOBAL__sub_I_hw:00000000 $t
C:\Users\kgpol\AppData\Local\Temp\ccDNfb9N.s:556    .text.startup._GLOBAL__sub_I_hw:00000000 _GLOBAL__sub_I_hw
C:\Users\kgpol\AppData\Local\Temp\ccDNfb9N.s:714    .text.startup._GLOBAL__sub_I_hw:00000030 $d
C:\Users\kgpol\AppData\Local\Temp\ccDNfb9N.s:727    .init_array:00000000 $d
C:\Users\kgpol\AppData\Local\Temp\ccDNfb9N.s:751    .bss.sw_1:00000000 sw_1
C:\Users\kgpol\AppData\Local\Temp\ccDNfb9N.s:737    .bss.bd:00000000 bd
C:\Users\kgpol\AppData\Local\Temp\ccDNfb9N.s:744    .bss.hw:00000000 hw
C:\Users\kgpol\AppData\Local\Temp\ccDNfb9N.s:733    .bss.bd:00000000 $d
C:\Users\kgpol\AppData\Local\Temp\ccDNfb9N.s:740    .bss.hw:00000000 $d
C:\Users\kgpol\AppData\Local\Temp\ccDNfb9N.s:747    .bss.sw_1:00000000 $d
                           .group:00000000 _ZN5daisy6SwitchD5Ev
                           .group:00000000 _ZN5daisy9DaisySeedD5Ev
                           .group:00000000 _ZN7daisysp14AnalogBassDrumD5Ev

UNDEFINED SYMBOLS
_ZN7daisysp14AnalogBassDrum7ProcessEb
_ZN5daisy6Switch8DebounceEv
_ZNK5daisy9AdcHandle8GetFloatEh
_ZN7daisysp14AnalogBassDrum7SetFreqEf
_ZN7daisysp14AnalogBassDrum8SetDecayEf
_ZN7daisysp14AnalogBassDrum7SetToneEf
_ZN5daisy9DaisySeed9ConfigureEv
_ZN5daisy9DaisySeed4InitEb
_ZN5daisy9DaisySeed17SetAudioBlockSizeEj
_ZN5daisy9DaisySeed15AudioSampleRateEv
_ZN7daisysp14AnalogBassDrum4InitEf
_ZN7daisysp14AnalogBassDrum17SetAttackFmAmountEf
_ZN7daisysp14AnalogBassDrum15SetSelfFmAmountEf
_ZN5daisy9DaisySeed6GetPinEh
_ZN5daisy6Switch4InitE12dsy_gpio_pinf
_ZN5daisy16AdcChannelConfig10InitSingleE12dsy_gpio_pinNS0_15ConversionSpeedE
_ZN5daisy9AdcHandle4InitEPNS_16AdcChannelConfigEjNS0_12OverSamplingE
_ZN5daisy9AdcHandle5StartEv
_ZN5daisy9DaisySeed10StartAudioEPFvPKPKfPPfjE
__aeabi_atexit
__dso_handle
